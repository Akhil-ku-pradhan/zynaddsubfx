Effects
-------

Effects are, generally, blackboxes that transform audio signals in a
specified way. More exactly, the only input data for an effect in ZynAddSubFX
is:

* an array of samples, which is read *on line*
* the current system time (used for LFOs)

The output is the transformed array of samples.

NOTE: As described, effects have no information about anything else. For
example, key presses are not recognized. Therefore, pressing a key does not
initiate the LFO. Phase nobs will always be relative to a *global* LFO, which is
only dependent on the system time.

ZynAddSubFX has 3 types of effects:

* System Effects
* Insertion Effects
* Instrument Effects

TODO: Describe these 3 types.

General topics
~~~~~~~~~~~~~~

* *Wetness* determines the mix of the results of the effect and its input. This
mix is made the effects output. If an effect is wet, it means that nothing of
the input signal is bypassing the effect. If it is dry, then the effect has no
effect.
* *Filter stages* are the number of times that this filter is applied in series.
So, if this number is 1, you simply have this one filter. If it is two, the
sound first passes the filter, and the results then pass the same filter again.
In ZynAddSubFX, the wetness is applied after all stages were passed.

TODO: Can you make a diagram for these two, please?

Equalizer
~~~~~~~~~

Introduction
^^^^^^^^^^^^

An http://en.wikipedia.org/wiki/Filter_%28signal_processing%29[equalizer] is a
filter effect that applies different volume to different frequencies of the
input signal. This can, for example, to "filter out" unwanted frequencies.
Note that ZynAddSubFX's implementations follow the
http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt["Cookbook formulae for
audio EQ"] by Robert Bristow-Johnson.

Filter Types
^^^^^^^^^^^^

There are different types of filters. The number of poles define what will
happen at a given frequency. Mathematically, the filters are functions which
have poles that correspond to that frequency. Usually, two poles mean that the
function has more "steepness", and that you can set the exact value of the
function at the poles by defining the "resonance value". Filters with two poles
are also often referenced
as http://de.wikipedia.org/wiki/Butterworth-Filter[Butterworth Filters].

********************************************************************
For the interested, functions having poles means that we are given a quotient of
polynomials. The denominator has degree 1 or 2, depending on the filter having
one or two poles. In the file _DSP/AnalogFilter.cpp_,
_AnalogFilter::computefiltercoefs()_ sets the coefficients (depending on the
filter type), and _AnalogFilter::singlefilterout()_ shows the whole polynomial
(in a formula where no quotient is needed).
********************************************************************

The term passband (or often just "band") refers to the amount of frequencies
which are not significantly attenuated by the filter. 

There are different types of filters:

* Low-Pass Filters - they let pass only the frequencies lower than the cutoff
frequency
* High-Pass Filters - they let pass only the frequencies higher than the cutoff
frequency
* Low Shelf and High shelf filters are special types of LP and HP with less
passband.
* Band-Pass Filters - they let pass only the frequencies of a frequency
band close to the cutoff frequency
* Peak Filters are Band-Pass Filters with only a small amount of frequencies
("a peak") being passed
* Band-Reject Filters - they let pass only frequencies not close to the cutoff
frequency
* Notch Filters are Band-Reject Filters with only a small amount of frequencies
("a notch") being rejected

You can what ZynAddSubFX's filters do in the graphical window. The following
explains the abbreviations.

* LPF 1: Low-Pass, 1 pole.
* LPF 2: Low-Pass, 2 poles.
* HPF 1: High-Pass, 1 pole.
* HPF 2: High-Pass, 2 poles.
* BPF 2: Band-Pass, 2 poles.
* NF 2: Notch, 2 poles.
* PK 2: Peak, 2 poles.
* LS 2 Low Shelf, 2 poles.
* HS 2 High Shelf, 2 poles.

Usage
^^^^^

We describe all parts of the GUI here.

* The gain defines an offset which is added to the complete filter.
* The graphical window shows you the resulting filter type. This can be very
helpful to understand how the filters work.
* *B.* lets you choose the passband number. Multiple passbands define one
filter. This is important if you want multiple filters to be called after each
other. Note that filters are commutative.
* *T.* lets you choose the current filter's type, as described above.
* *Freq* describes the frequencies where the filter has its poles. For some
filters, this is called the "cutoff" frequency. Note, however, that a bandpass
filter has two cutoff frequencies.
* *Gain* is only active for some filters and sets the amount of a special peak
these filters have. Note that for those filters, using the predefined gain makes
them effectless.
* *Resonance* lets you describe a peak at the given frequency for filters with
2 poles. This can be compared to real physical objects that have more gain at
their resonance frequency.
* *St.* lets you define multiple filter stages. This is equivalent to having
multiple copies of the same filter.

Chorus
~~~~~~

Introduction
^^^^^^^^^^^^

In a chorus, many people sing together. Even if each of them sings at exactly
the same frequency, all their voices usually sound different. We say they have a
different timbre. Timbre is the way we perceive sound and makes us differ
between different music instruments. This is, physically, achieved by varying
both the amplitude envelope and the frequency spectrum. Multiple sounds with
slightly different timbres make a sound more shimmering, or powerful. This is
called the chorus effect.

Function
^^^^^^^^

The chorus effect can be achieved by multiple people singing together. In
a concert, there are many instruments, resulting in the same effect. When making
electronic music, we only have an input wave and need to generate these
different timbres by ourselves. ZynAddSubFX therefore simply plays the sound,
pitch modulated by an LFO, and adds this to the original sound. This explains
the diagram below: The multiple pitches are generated by a delayed version of
the input. This version is being pitched by an LFO. More detailled, this pitch
is generated by varying the reading speed of the delayed sound; the variation
amount is controlled by an LFO.

image::./gen/chorus.png[width="700", title="The chorus effect. $z^{-n.m}$
describes the delay. TODO: Add LFO pointing to delay?"]

Related effects to Chorus are Flangers. Flangers can be described as Chorus
with very short LFO delay and little LFO depth. You can imagine a flanger as two
copies of a sound playing at almost the same time. This leeds to interference,
which can be clearly heared. It is popular to apply flangers to guitars, giving
them more "character".

Usage
^^^^^

* First, crossover is applied. The *L/R* knob lets you set the amount. If
you set it to 0.0, you will always have a stereo input.
* The following 4 knobs control the LFO.
** *Freq* determines the LFO's frequency
** *Rnd* is the LFO amplitude's randomness
** *LFO Type* determines the shape of the LFO
** *St.df* lets you determine how much left and right LFO are phase shifted.
64.0f means stereo, higher values increase the right lfo relatively to the left
one.
* *Dpth* determines how much influence the LFO has on the delay. If the depth
is set to zero, the pitch will not be changed at all.
* *Delay* is the time that the delayed sound is delayed "on average". Note that
the delay also depends on the current pitch.
* After the correct element of the sound buffer is found using the LFO, the
*Fb* knob lets you set how loud it shall be played. This is mostly redundant to
the *D/W* knob, but we have not applied panning and substraction yet. 
* Next, the singal can be negated. If the *Substract* Checkbox is activated,
the amplitude is multiplied by -1.
* Finally, *Pan* lets you apply panning. Set it to 0.0 to only hear
output on the right side.

Distortion
~~~~~~~~~~

Introduction
^^^^^^^^^^^^

Distortion means, in general, altering a signal. Natural instruments
usually produce sine like waves. A wave is transformed in an unnatural way when
distortion is used. The most distorted waves are pulse waves. It is typical for
distortion to add overtones to a sound. Distortion often increases the power and
the http://en.wikipedia.org/wiki/Loudness[loudness] of a signal, while the db
level is not increased. This is an important topic in the
http://en.wikipedia.org/wiki/Loudness_war[Loudness War].

NOTE: As distortion increases loudness, distorted music can cause ear damage
at lower volume levels. Thus, you might want to use it a bit careful.

Distortion can happen in many situations when working with audio. Often, this is
not wanted. In classical music, for example, distortion does not occur
naturally. However, distortion can also be a wanted effect. It is typical for
Rock guitars, but also present in electronic music, mostly in Dubstep and
DrumNBass.

The basic components of distortion are mainly

* a preamplifier
* the waveshaping function
* filters

image::./gen/distort.png[width="700"]

Preamplification changes the volume before the wave is shaped, and is indeed the
amount of distortion. For example, if you clip a signal, the louder the input
gets, the more distortion you will get. This can have different meanings for
different types of distortions, as described below.

********************************************************************
The filters are practical. A reason for using them afterwards is that distortion
can lead to waves with undesired high frequency parts. Those can be filtered out
using the HPF. A reason for using filters before applying is to achieve
multiband distortion. ZynAddSubFX has no "real" multiband distortion by now,
however.
********************************************************************

Types of Distortion
^^^^^^^^^^^^^^^^^^^

The type of distortion has much influence on how the overtones are being placed.
Sometimes, you get a "fat" bass, and sometimes, high frequencies are added,
makeing the sound "crystal clear". Please note that you can get a very good
impression for this using the *Wsh* ComboBox in the Oscillator editor.

Atan & Sigmoid
++++++++++++++

This is the default setting. It is an easy way to apply loudness to a
wave without getting undesired high overtones. Thus, it can be used both for
making instruments that sound like "real" ones, but also for electronic music.
The transformation turns, roughly said, every amplitude into a square amplitude.
Thus, sine, power, pulse and triangle turn into a usual square wave, while a saw
turns into a phased square wave. A chirp wave turns into a kind of phase
modulated square wave.

Quants
++++++

http://en.wikipedia.org/wiki/Quantization_%28sound_processing%29[Quantization]
adds high overtones early. It can be seen as an unnatural effect, which is often
used for electronic music.

The transformation is a bit similar to building
the http://en.wikipedia.org/wiki/Riemann_sum[lower sum] of a wave,
mathematically said. This means that the transformation effect turns your
"endless high" sampled wave into only a few samples. The more distortion you
will apply, the less samples will be used. Indeed, this is equivalent to say
that more input amplification is used. To see this, here is a small sample of
code, where "ws" is the (correctly scaled amount of input amplification, and "n"
the number of original samples.

---------------------------------
for(i = 0; i < n; ++i)
  smps[i] = floor(smps[i] / ws + 0.5f) * ws;
---------------------------------

NOTE: If you turn on quantisation very high, you might be confused
that, especially high notes, make no sound. The reason is simple: High
frequencies are "forgotten" if you sample with only few samples. Also, the sign
of an amplitude can be forgotten. This behaviour might make some quantisations a
bit unexpected.


Limiting & Clipping
+++++++++++++++++++

http://en.wikipedia.org/wiki/Limiting[Limiting] usually means that for a signal,
the amplitude is modified because it exceeds its maximum value. Overdrive, as
often used for guitars, is often achieved by limiting: It happens because an
amplifier "overdrives" the maximum amplitude it can deliver.

ZynAddSubFX has two types of limiting. Soft limiting, here as *Lmt*, means
that the sound may not exceed a certain value. If the amplitude does so, it will
simply be reduced to the limiting value. The overtones are generated in the
lower frequencies first.

Hard limiting, is also called clipping and abbreviated *Clip*. This means that
if the maximum is exceeded, instead of being constant at the limiting value, the
original signal still has some influence on the output signal. Still, it does
not exceed the limiting value. For ZynAddSubFX, a signal exceeding the limiting
value will continue to grow "in the negative". This leads to overtones being
generated on the full frequency band.

Function
^^^^^^^^

We explain the functionality in a diagram and list the components below.

image::./gen/distort.png[width="700", title="The components of a distortion
function."]

* Negation is the first thing to happen. If the *Neg* Checkbox is activated, the
amplitude is multiplied by -1.
* Panning is applied. Note, however, that you have to activate the
Stereo Checkbox, labeled *St*, before.
* Pre amplification is done next. The amount can be changed using the
*Drive* nob. Indeed, this is the amount of distortion. For example, if you clip
a signal, the louder the input gets, the more distortion you will get. This can
have different meanings for different types of distortion, as described below.
* *HPF* and *LPF* are lowpasses with 2 poles. Whether they are used before or
after the waveshape, depends on the checkbox labeled *PF*.
* The next step is the wave shape. This defines how the wave is
actuallymodified. The *Type* ComboBox lets you define how. We will discuss some
types below.
* After the wave shape, we scale the level again. This is called
output amplification. You can change the value using the *Level* knob.
* Crossover is the last step. This is controlled by the knob *LR Mix* and
means that afterwards, a percentage of the left side is applied to the right
side, and, synchronously, the other way round. It is a kind of interpolation
between left and right. If you set the LR Mix to 0.0, you will always have a
stereo output.

Dynamic Filter
~~~~~~~~~~~~~

Introduction
^^^^^^^^^^^^

A dynamic filter is, as the name says, a filter which changes its parameters
dynamically, dependent on the input and current time. In ZynAddSubFX,
frequency is the only variable parameter. It can be used as an "envelope
following filter" (sometimes referenced "Auto Wah" or simply "envelope filter").

Function
^^^^^^^^

Though this filter might look a bit complicated, it is actually easy. We divide
the parameters into two classes:

* *Filter Parameters* are the ones you get when you click on *Filter*. They
give the filter its basic settings.
* *Effect Parameters* are the other ones that control how the filter changes.

The filter basically works like this. The input signal is passed through a
filter which dynamically changes its frequency. The frequency is an additive of:

* the filter's bass frequency
* an LFO from the effect parameters
* the "amplitude" of the input wave

image::./gen/dynamic.png[width="700", title="The components of a dynamical
filter"]

The amplitude of the input wave is not the current amplitude, but the so called
https://en.wikipedia.org/wiki/Root_mean_square["Root Mean Square (RMS)"] value.
This means that we build a mean on the current amplitude and the past values.
How much the new amplitude takes influence is determined by the *Amplitude
Smoothness*.

********************************************************************
RMS value plays an important role in the term loudness. A fully distorted
signal can sound 20 db louder due to its higher RMS value. This filter takes
this into account, depending on the smoothness.
********************************************************************

Usage
^^^^^

* The following 4 knobs control the LFO.
** *Freq* determines the LFO's frequency
** *Rnd* is the LFO amplitude's randomness
** *LFO Type* determines the shape of the LFO
** *St.df* lets you determine how much left and right LFO are phase shifted.
64.0f means stereo, higher values increase the right lfo relatively to the left
one.
* These knobs let you control the way how the RMS value of the amplitudes is
measured.
** *A.M* sets the Amplitude Smoothness.
** *A.Inv.*, if being set, negates the (absolute) RMS value. This will lower
the filter frequency instead of increasing it.
* The following controls defined the Mix of the LFO and the amplitude.
** *A.S* sets the Amplitude Sensing
** *LfoD* sets the LFO depth
* The filter button lets you choose the filter type.
* After the input signal has passed through the filter, *Pan* can apply
panning. Set it to 0.0 to only hear output on the right side.

Echo
~~~~

Introduction
^^^^^^^^^^^^

The echo effect, also known as
http://en.wikipedia.org/wiki/Delay_%28audio_effect%29[delay effect], simulates
the natural reflection of a sound. The listener can hear the sound multiple
times, usually decreasing in volume.

In ZynAddSubFX, the echo is basically implemented as the addition of the
current sound and a delayed version of it. TODO: Talk about dampening and LPFs.

image::./gen/echo.png[width="700", title="The echo effect includes a feedback
line, labeled as $z^{-n}$, and a delay."]

Description
^^^^^^^^^^^

* First, *Pan* lets you apply panning of the input. Set it to 0.0 to only pan
the input to the right side.
* In the next step, the delayed buffer is added. We will discuss how it is
generated soon.
* Next, a Lowpass filter is applied. This shall simulate 


* First, Crossover is applied. Set the *LRc.* to 1.0 to completely switch left
and right input, to 0.5 to mix both as stereo, or to 0.0 to have no crossing
effect.



Reverb
~~~~~~

Introduction
^^^^^^^^^^^^

A http://en.wikipedia.org/wiki/Reverberation[Reverberation] actually expresses
the effect of many echoes being played at the same time. This can happen in an
enclosed room, where the sound can be reflected in different angles. Also, in
nature, thunders approximate reverbs, because the sound is reflected in many
different ways, arriving at the listener at different times.

In music, reverbs are popular in many ways. Reverbs with large room size can be
used to emulate sounds like in live concerts. This is useful for voices, pads,
and especially hand claps. A small room size can simulate the sound board of
string instruments, like guitars or pianos.

While the initial delay for an echo is given by, the echo delay, for the
reverb, we need a seperate controller for that. TODO: Talk about dampening.

image::./gen/reverb.png[width="700", "The reverb, being similar to the echo."]

Description
^^^^^^^^^^^

(TODO)

