# data file for the Fltk User Interface Designer (fluid)
version 1.0200 
header_name {.h} 
code_name {.cc}
decl {//Copyright (c) 2002-2003 Nasca Octavian Paul} {} 

decl {//License: GNU GPL version 2} {} 

decl {\#include <stdlib.h>} {public
} 

decl {\#include <stdio.h>} {public
} 

decl {\#include <string.h>} {public
} 

decl {\#include <FL/Fl_Button.H>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include "../Misc/Master.h"} {public
} 

decl {\#include "../Misc/Bank.h"} {public
} 

class BankProcess_ {} {
  Function {process()} {return_type {virtual void}
  } {}
  decl {Bank *bank;} {public
  }
} 

class BankSlot {: {public Fl_Button,BankProcess_}
} {
  Function {BankSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {what=NULL;
whatslot=NULL;
nslot=0;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if (what==NULL) return(0);
if (Fl::event_inside(this)){
  *what=0;*whatslot=nslot;
  if ((event==FL_RELEASE)&&(Fl::event_button()==1))*what=1;
  if ((event==FL_RELEASE)&&(Fl::event_button()==3))*what=2;
  if (event==FL_PUSH) highlight=1;
}else highlight=0;

int tmp=Fl_Button::handle(event);
if ((*what!=0) && Fl::event_inside(this)) (bp->*fnc)();
return(tmp);} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_,void (BankProcess_:: *fnc_)(void),BankProcess_ *bp_,Bank *bank_)} {} {
    code {nslot=nslot_;
what=what_;
whatslot=whatslot_;
fnc=fnc_;
bp=bp_;
bank=bank_;
box(FL_THIN_UP_BOX);
align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
highlight=0;
refresh();} {}
  }
  Function {refresh()} {} {
    code {if (bank->emptyslot(nslot)) color(46);
    else color(51);


//printf("%s\\n",bank->getnamenumbered(nslot));

label(bank->getnamenumbered(nslot));} {}
  }
  decl {int *what,*whatslot,nslot,highlight;} {}
  decl {void (BankProcess_:: *fnc)(void);} {}
  decl {BankProcess_ *bp;} {}
} 

class BankUI {open : {public BankProcess_}
} {
  Function {make_window()} {open
  } {
    Fl_Window bankuiwindow {
      label Bank
      xywh {16 205 770 435} type Double
      code0 {o->label(bank->bankfiletitle);}
      code1 {if (bank->bankfiletitle==NULL) o->label ("Choose a bank to use by pressing the 'Load/Use Bank from file...' button or choose 'New Bank...' to make a new bank.");} visible
    } {
      Fl_Button {} {
        label Close
        callback {bankuiwindow->hide();}
        xywh {555 402 60 24} box THIN_UP_BOX
      }
      Fl_Pack {} {
        xywh {6 6 150 375} box BORDER_BOX
        code0 {o->box(FL_NO_BOX);}
        code1 {for (int i=0;i<25;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank);};}
      } {}
      Fl_Pack {} {
        xywh {159 6 150 375} box BORDER_BOX
        code0 {o->box(FL_NO_BOX);}
        code1 {for (int i=25;i<50;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank);};}
      } {}
      Fl_Pack {} {
        xywh {312 6 150 375} box BORDER_BOX
        code0 {o->box(FL_NO_BOX);}
        code1 {for (int i=50;i<75;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank);};}
      } {}
      Fl_Pack {} {
        xywh {465 6 150 375} box BORDER_BOX
        code0 {o->box(FL_NO_BOX);}
        code1 {for (int i=75;i<100;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank);};}
      } {}
      Fl_Pack {} {
        xywh {618 6 150 420} box BORDER_BOX
        code0 {o->box(FL_NO_BOX);}
        code1 {for (int i=100;i<128;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank);};}
      } {}
      Fl_Group {} {open
        xywh {6 384 321 42} box ENGRAVED_BOX
      } {
        Fl_Light_Button writebutton {
          label WRITE
          callback {if (o->value()>0.5) mode=2}
          xywh {117 390 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 1 labeltype ENGRAVED_LABEL labelfont 1 labelsize 18
          code0 {if (bank->locked()) o->deactivate();}
        }
        Fl_Light_Button readbutton {
          label READ
          callback {if (o->value()>0.5) mode=1;}
          xywh {12 390 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 101 labeltype ENGRAVED_LABEL labelfont 1 labelsize 18
          code0 {o->value(1);}
        }
        Fl_Light_Button clearbutton {
          label CLEAR
          callback {if (o->value()>0.5) mode=3;}
          xywh {222 390 99 30} type Radio box PLASTIC_UP_BOX down_box THIN_DOWN_BOX selection_color 0 labeltype ENGRAVED_LABEL labelfont 1 labelsize 18
          code0 {if (bank->locked()) o->deactivate();}
        }
      }
      Fl_Button {} {
        label {Use Bank...}
        callback {const char *dirname;
dirname=fl_dir_chooser("Load and use Bank from dir.:",NULL,0);
if (dirname==NULL) return;
if (bank->loadbank(dirname)==2)
       fl_alert("Error: Could not load the bank from the directory.");
for (int i=0;i<128;i++) bs[i]->refresh();
refreshmainwindow();}
        xywh {330 385 95 20} box PLASTIC_UP_BOX labelfont 1 labelsize 12 align 128
      }
      Fl_Button {} {
        label {New Bank...}
        callback {char *dirname;
dirname=fl_dir_chooser("New empty Bank:",NULL,0);
if (dirname==NULL) return;

int result=bank->newbank(dirname);

if (result!=0) fl_alert("Error: Could not make a new bank (directory)..");
for (int i=0;i<128;i++) bs[i]->refresh();
refreshmainwindow();}
        xywh {330 407 93 20} box PLASTIC_UP_BOX labelfont 1 labelsize 12 align 128
      }
      Fl_Check_Button {} {
        label {auto close}
        callback {config.cfg.BankUIAutoClose=(int) o->value();}
        tooltip {automatically close the bank window if the instrument is loaded} xywh {555 385 60 15} down_box DOWN_BOX labelsize 10
        code0 {o->value(config.cfg.BankUIAutoClose);}
      }
      Fl_Button {} {
        label {IMPORT from bnk_zyn}
        callback {const char *filename;
filename=fl_file_chooser("Convert Bank from bnk_zyn file:","(*.bnk_zyn)",NULL,0);
if (filename==NULL) return;

master->exportbankasxmldirectory(filename);

for (int i=0;i<128;i++) bs[i]->refresh();
refreshmainwindow();} selected
        xywh {440 385 105 40} box PLASTIC_UP_BOX color 175 labelfont 1 labelsize 15 labelcolor 0 align 128
      }
    }
  }
  Function {BankUI(Master *master_,int *npart_)} {} {
    code {fnc=&BankProcess_::process;
master=master_;
npart=npart_;
bank=&master_->bank;
what=0;
make_window();
mode=1;} {}
  }
  Function {~BankUI()} {return_type virtual
  } {
    code {bankuiwindow->hide();
delete(bankuiwindow);} {}
  }
  Function {show()} {} {
    code {bankuiwindow->show();} {}
  }
  Function {init(Fl_Valuator *cbwig_)} {} {
    code {cbwig=cbwig_;} {}
  }
  Function {process()} {return_type void
  } {
    code {int slot=this->slot;

if ((what==2)&&(bank->emptyslot(slot)==0)) {//Rename slot
    const char *tmp=fl_input("Slot (instrument) name:",(const char *)bank->getname(slot));
    if (tmp!=NULL) bank->setname(slot,tmp);
    bs[slot]->refresh();
};

if ((what==1)&&(mode==2)){//save(write) to slot
  if (!bank->emptyslot(slot))
      if (!fl_ask("Overwrite the slot no. %d ?",slot+1)) goto nooverwriteslot;
       pthread_mutex_lock(&master->mutex);
        bank->savetoslot(slot,master->part[*npart]);
       pthread_mutex_unlock(&master->mutex);

       bs[slot]->refresh();
       mode=1;readbutton->value(1);writebutton->value(0);
       nooverwriteslot:;
};


if ((what==1)&&(mode==1)&&(!bank->emptyslot(slot))){//Reads from slot
    pthread_mutex_lock(&master->mutex);
     bank->loadfromslot(slot,master->part[*npart]);
    pthread_mutex_unlock(&master->mutex);
     if (master->part[*npart]->disablekitloading==0){
       snprintf((char *)master->part[*npart]->Pname,PART_MAX_NAME_LEN
        ,"%s",bank->getname(slot));
     } else {
       snprintf((char *)master->part[*npart]->kit[0].Pname,PART_MAX_NAME_LEN
        ,"%s",bank->getname(slot));
     };
     cbwig->do_callback();
     
     if (config.cfg.BankUIAutoClose!=0)
         bankuiwindow->hide();

};

if ((what==1)&&(mode==3)&&(!bank->emptyslot(slot))){//Clears the slot
      if (fl_ask("Clear the slot no. %d ?",slot+1)){
          bank->clearslot(slot);
          bs[slot]->refresh();
      };
};

refreshmainwindow();} {}
  }
  Function {refreshmainwindow()} {} {
    code {bankuiwindow->label(bank->bankfiletitle);
mode=1;readbutton->value(1);writebutton->value(0);clearbutton->value(0);
if (bank->locked()){
    writebutton->deactivate();
    clearbutton->deactivate();
} else {
    writebutton->activate();
    clearbutton->activate();
};} {}
  }
  decl {BankSlot *bs[128];} {}
  decl {int slot,what;//"what"=what button is pressed} {}
  decl {int mode,*npart;} {}
  decl {Master *master;} {}
  decl {void (BankProcess_::* fnc)(void);} {}
  decl {Fl_Valuator *cbwig;} {public
  }
} 
