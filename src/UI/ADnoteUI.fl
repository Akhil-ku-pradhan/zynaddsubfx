# data file for the Fltk User Interface Designer (fluid)
version 1.0200 
header_name {.h} 
code_name {.cc}
decl {//Copyright (c) 2002-2004 Nasca Octavian Paul} {} 

decl {//License: GNU GPL version 2} {} 

decl {\#include "../Params/ADnoteParameters.h"} {public
} 

decl {\#include "../Synth/OscilGen.h"} {public
} 

decl {\#include "../Misc/Util.h"} {public
} 

decl {\#include "../Misc/Master.h"} {public
} 

decl {\#include "ResonanceUI.h"} {public
} 

decl {\#include <FL/Fl_Box.H>} {public
} 

decl {\#include <FL/Fl_Group.H>} {public
} 

decl {\#include <math.h>} {} 

decl {\#include <stdio.h>} {} 

decl {\#include <stdlib.h>} {} 

decl {\#include <string.h>} {} 

decl {\#include "WidgetPDial.h"} {public
} 

decl {\#include "EnvelopeUI.h"} {public
} 

decl {\#include "LFOUI.h"} {public
} 

decl {\#include "FilterUI.h"} {public
} 

class ADSpectrum {: {public Fl_Box}
} {
  Function {ADSpectrum(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {oscil=NULL;} {}
  }
  Function {init(OscilGen *oscil_,int oscbase_,Master *master_)} {} {
    code {oscil=oscil_;
oscbase=oscbase_;
master=master_;} {}
  }
  Function {draw()} {} {
    code {int ox=x(),oy=y(),lx=w(),ly=h(),i;
const int maxdb=60;//must be multiple of 10
int GX=2;
int n=lx/GX-1;
if (n>OSCIL_SIZE/2) n=OSCIL_SIZE/2;

REALTYPE x;
REALTYPE spc[n];
for (i=0;i<n;i++) spc[i]=0.0;

pthread_mutex_lock(&master->mutex);
if (oscbase==0) oscil->getspectrum(n,spc,0);
    else oscil->getspectrum(n,spc,1);
pthread_mutex_unlock(&master->mutex);

//normalize
REALTYPE max=0;
for (i=0;i<n;i++){
   x=fabs(spc[i]);
   if (max<x) max=x;
}
if (max<0.000001) max=1.0;
max=max*1.05;

//draw

if (this->active_r()) fl_color(this->parent()->selection_color());
    else fl_color(this->parent()->color());
if ((ANTI_ALIAS==0)&&(oscbase==0)) fl_color(this->parent()->color());
fl_line_style(FL_DOT);

for (i=1;i<maxdb/10;i++){
  int ky=(int)((REALTYPE)i*ly*10.0/maxdb)/2;
  ky*=2;
  fl_line(ox,oy+ky-1,ox+lx-2,oy+ky-1);
};

for (i=2;i<n;i++){
    int tmp=i*GX-2;
    if (i%10==1) fl_line_style(0);
       else fl_line_style(FL_DOT);
    fl_line(ox+tmp,oy+2,ox+tmp,oy+ly-2);
}

if (this->active_r()) fl_color(this->parent()->labelcolor());
    else fl_color(this->parent()->color());
fl_line_style(0);

//draws the spectrum
for (i=0;i<n;i++){
   int tmp=i*GX+2;
   x=spc[i]/max;
   
   if (x>dB2rap(-maxdb)) x=rap2dB(x)/maxdb+1;
       else x=0;

   int val=(int) ((ly-2)*x);
   if (val>0) fl_line(ox+tmp,oy+ly-2-val,ox+tmp,oy+ly-2);
};} {}
  }
  decl {OscilGen *oscil;} {}
  decl {int oscbase;} {}
  decl {Master *master;} {}
} 

class ADOscilloscope {: {public Fl_Box}
} {
  Function {ADOscilloscope(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {oscil=NULL;
phase=64;
oscbase=0;} {}
  }
  Function {init(OscilGen *oscil_,Master *master_)} {} {
    code {oscil=oscil_;
master=master_;} {}
  }
  Function {init(OscilGen *oscil_,int oscbase_,Master *master_)} {} {
    code {oscil=oscil_;
oscbase=oscbase_;
master=master_;} {}
  }
  Function {init(OscilGen *oscil_,int oscbase_,int phase_,Master *master_)} {} {
    code {oscil=oscil_;
oscbase=oscbase_;
phase=phase_;
master=master_;} {}
  }
  Function {draw()} {} {
    code {int ox=x(),oy=y(),lx=w(),ly=h()-1,i;
REALTYPE smps[OSCIL_SIZE];
pthread_mutex_lock(&master->mutex);
if (oscbase==0) oscil->get(smps,-1.0);
    else oscil->getcurrentbasefunction(smps);
pthread_mutex_unlock(&master->mutex);

//normalize
REALTYPE max=0;
for (i=0;i<OSCIL_SIZE;i++)
   if (max<fabs(smps[i])) max=fabs(smps[i]);
//fprintf(stderr,"%.4f\\n",max);
if (max<0.00001) max=1.0;
max=-max*1.05;

//draw
fl_line_style(FL_DASH);
if (this->active_r()) fl_color(this->parent()->labelcolor());
    else fl_color(this->parent()->color());
int GX=16;if (lx<GX*3) GX=-1;
for (i=1;i<GX;i++){
   int tmp=(int)(lx/(REALTYPE)GX*i);
   fl_line(ox+tmp,oy+2,ox+tmp,oy+ly-2);
};
int GY=8;if (ly<GY*3) GY=-1;
for (i=1;i<GY;i++){
   int tmp=(int)(ly/(REALTYPE)GY*i);
   fl_line(ox+2,oy+tmp,ox+lx-2,oy+tmp);
};

//draw the function
fl_line_style(0,1);
fl_line(ox+2,oy+ly/2,ox+lx-2,oy+ly/2);
if (this->active_r()) fl_color(this->parent()->selection_color());
    else fl_color(this->parent()->labelcolor());
int lw=1;
//if ((lx<135)||(ly<135)) lw=1;
fl_line_style(0,lw);
int ph=(int)((phase-64.0)/128.0*OSCIL_SIZE+OSCIL_SIZE);
for (i=1;i<lx;i++){
   int k1=(int)((REALTYPE)OSCIL_SIZE*(i-1)/lx)+ph;
   int k2=(int)((REALTYPE)OSCIL_SIZE*i/lx)+ph;
   REALTYPE y1=smps[k1%OSCIL_SIZE]/max;
   REALTYPE y2=smps[k2%OSCIL_SIZE]/max;
   fl_line(i-1+ox,(int)(y1*ly/2.0)+oy+ly/2,i+ox,(int)(y2*ly/2.0)+oy+ly/2);
};} {}
  }
  decl {OscilGen *oscil;} {}
  decl {int oscbase;} {}
  decl {int phase;} {public
  }
  decl {Master *master;} {}
} 

class ADOscilharmonic {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window harmonic {
      private xywh {421 154 90 225} type Double hide
      class Fl_Group
    } {
      Fl_Slider mag {
        callback {int x=64;
if (Fl::event_button1()) x=127-(int)o->value();
   else o->value(x);
if (x==64) o->selection_color(0);
    else o->selection_color(222);

pthread_mutex_lock(&master->mutex);
 oscil->Phmag[n]=x;
 oscil->prepare();
pthread_mutex_unlock(&master->mutex);

display->redraw();
oldosc->redraw();}
        xywh {0 15 15 115} type {Vert Knob} box FLAT_BOX selection_color 222 labelcolor 0 maximum 127 step 1 value 64
        code0 {o->value(127-oscil->Phmag[n]);}
        code1 {if (oscil->Phmag[n]==64) o->selection_color(0);}
      }
      Fl_Slider phase {
        callback {int x=64;
if (Fl::event_button1()) x=(int)o->value();
   else o->value(x);

pthread_mutex_lock(&master->mutex);
 oscil->Phphase[n]=x;
 oscil->prepare();
pthread_mutex_unlock(&master->mutex);

display->redraw();
oldosc->redraw();}
        xywh {0 135 15 75} type {Vert Knob} box FLAT_BOX selection_color 222 maximum 127 step 1 value 64
        code0 {o->value(oscil->Phphase[n]);}
      }
      Fl_Box {} {
        xywh {15 70 5 5} box FLAT_BOX color 45
      }
      Fl_Box {} {
        xywh {15 170 5 5} box FLAT_BOX color 45
      }
      Fl_Box {} {
        label 01
        xywh {0 210 20 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
      Fl_Box {} {
        label 01
        xywh {0 0 20 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
    }
  }
  Function {ADOscilharmonic(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {n=0;
oscil=NULL;
display=NULL;} {}
  }
  Function {init(OscilGen *oscil_,int n_,Fl_Group *display_,Fl_Widget *oldosc_, Master *master_)} {} {
    code {oscil=oscil_;
n=n_;
display=display_;
master=master_;
oldosc=oldosc_;
make_window();
end();
harmonic->show();} {}
  }
  Function {~ADOscilharmonic()} {} {
    code {harmonic->hide();
delete(harmonic);} {}
  }
  decl {OscilGen *oscil;} {}
  decl {Fl_Group *display;} {}
  decl {int n;} {}
  decl {Fl_Widget *oldosc;} {}
  decl {Master *master;} {}
} 

class ADOscilEditor {} {
  Function {make_window()} {} {
    Fl_Window osceditUI {
      label {ADsynth Oscillator Editor}
      xywh {96 94 750 590} type Double hide
    } {
      Fl_Group oscildisplaygroup {
        xywh {15 5 360 300} box ENGRAVED_FRAME
      } {
        Fl_Group {} {open
          xywh {20 85 350 190} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
          code0 {ADOscilloscope *osc=new ADOscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {osc->init(oscil,master);}
        } {}
        Fl_Box {} {
          label Oscillator
          xywh {130 10 110 20} box FLAT_BOX labelfont 1
        }
        Fl_Value_Slider {} {
          label rnd
          callback {oscil->Prand=(int)o->value()+64;
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscilator Phase Randomness: smaller than 0 is "group", larger than 0 is for each harmonic} xywh {150 285 100 10} type {Horz Knob} box FLAT_BOX labelsize 10 align 5 minimum -64 maximum 63 step 1
          code0 {o->value(oscil->Prand-64);}
        }
        Fl_Group {} {open
          xywh {20 30 350 50} box THIN_DOWN_BOX color 32 selection_color 218 labelcolor 63
          code0 {ADSpectrum *spc=new ADSpectrum(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {spc->init(oscil,0,master);}
        } {}
        Fl_Group {} {
          xywh {256 277 115 25} box ENGRAVED_BOX
        } {
          Fl_Choice {} {
            label {H.rnd}
            callback {oscil->Pamprandtype=(int) o->value();}
            tooltip {Harmonic Amplitude Randomness} xywh {291 282 50 15} down_box BORDER_BOX labelsize 10 textsize 10
            code0 {o->value(oscil->Pamprandtype);}
          } {
            menuitem {} {
              label None
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            menuitem {} {
              label Pow
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            menuitem {} {
              label Sin
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Dial {} {
            callback {oscil->Pamprandpower=(int) o->value();}
            tooltip {Oscillator's spectrum adjust parameter} xywh {348 280 18 18} maximum 127 step 1
            code0 {o->value(oscil->Pamprandpower);}
            class WidgetPDial
          }
        }
      }
      Fl_Box {} {
        label {Base Func.}
        xywh {505 15 110 20} box FLAT_BOX labelfont 1
      }
      Fl_Group basefuncdisplaygroup {
        xywh {375 5 360 300} box ENGRAVED_FRAME
      } {
        Fl_Group {} {open
          xywh {380 85 350 190} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
          code0 {ADOscilloscope *osc=new ADOscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {osc->init(oscil,1,master);}
        } {}
        Fl_Dial {} {
          callback {oscil->Pbasefuncpar=(int)o->value()+64;
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();
bfparval->value(oscil->Pbasefuncpar-64);}
          tooltip {Base Function Parameter} xywh {530 280 20 20} minimum -64 maximum 63 step 1
          code0 {o->value(oscil->Pbasefuncpar-64);}
          class WidgetPDial
        }
        Fl_Choice {} {
          label {Base.F..}
          callback {oscil->Pcurrentbasefunc=(int) o->value();

basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();

if ((oscil->Pcurrentbasefunc==0)||(oscil->Pcurrentbasefunc==127)) basefuncmodulation->deactivate();
      else basefuncmodulation->activate();}
          xywh {380 285 90 15} down_box BORDER_BOX labelsize 10 align 5 textsize 12
          code0 {o->value(oscil->Pcurrentbasefunc);}
        } {
          menuitem {} {
            label Sine
            xywh {10 10 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Triangle
            xywh {20 20 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Pulse
            xywh {30 30 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Saw
            xywh {40 40 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Power
            xywh {50 50 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Gauss
            xywh {50 50 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Diode
            xywh {60 60 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label AbsSine
            xywh {70 70 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label PulseSine
            xywh {80 80 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label StrchSine
            xywh {90 90 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Chirp
            xywh {100 100 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label AbsStrSine
            xywh {102 102 100 20} labelfont 1 labelsize 12
          }
          menuitem {} {
            label Chebyshev
            xywh {112 112 100 20} labelfont 1 labelsize 12
          }
        }
        Fl_Box {} {
          label {Base Func.}
          xywh {490 10 110 20} box FLAT_BOX labelfont 1
        }
        Fl_Group {} {open
          xywh {380 30 350 50} box THIN_DOWN_BOX color 32 selection_color 218 labelcolor 63
          code0 {ADSpectrum *spc=new ADSpectrum (o->x(),o->y(),o->w(),o->h(),"");}
          code1 {spc->init(oscil,1,master);}
        } {}
        Fl_Value_Output bfparval {
          label {Par.}
          xywh {500 285 25 15} labelsize 13 minimum -63 maximum 63 step 1
          code0 {o->value(oscil->Pbasefuncpar-64);}
        }
      }
      Fl_Choice {} {
        label {Mag.Type}
        callback {oscil->Phmagtype=(int) o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();}
        xywh {80 280 65 20} down_box BORDER_BOX labelsize 12 textsize 12
        code0 {o->value(oscil->Phmagtype);}
      } {
        menuitem {} {
          label Linear
          xywh {0 0 100 20} labelfont 1 labelsize 12
        }
        menuitem {} {
          label {-40dB}
          xywh {10 10 100 20} labelfont 1 labelsize 12
        }
        menuitem {} {
          label {-60dB}
          xywh {20 20 100 20} labelfont 1 labelsize 12
        }
        menuitem {} {
          label {-80dB}
          xywh {30 30 100 20} labelfont 1 labelsize 12
        }
        menuitem {} {
          label {-100dB}
          xywh {40 40 100 20} labelfont 1 labelsize 12
        }
      }
      Fl_Button {} {
        label {Use as base}
        callback {oscil->useasbase();
if (autoclearbutton->value()){
   for (int i=0;i<MAX_AD_HARMONICS;i++){
      h[i]->mag->value(64);
      oscil->Phmag[i]=64;
      h[i]->phase->value(64);
      oscil->Phphase[i]=64;
   };
   oscil->Phmag[0]=127;

   oscil->Pharmonicshift=0;
   harmonicshiftcounter->value(0);

   h[0]->mag->value(0);
   wshbutton->value(0);
   wshbutton->do_callback();
   fltbutton->value(0);
   fltbutton->do_callback();
   sabutton->value(0);
   sabutton->do_callback();
};

pthread_mutex_lock(&master->mutex);
 for (int i=0;i<MAX_AD_HARMONICS;i++){
   if (oscil->Phmag[i]==64) h[i]->mag->selection_color(0);
      else h[i]->mag->selection_color(222);
 };
 oscil->prepare();
pthread_mutex_unlock(&master->mutex);

oscildisplaygroup->redraw();
basefuncdisplaygroup->redraw();
oldosc->redraw();}
        tooltip {Use this Oscillator as base function} xywh {15 310 85 20} box THIN_UP_BOX labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Close
        callback {osceditUI->hide();}
        xywh {678 557 69 28} box THIN_UP_BOX
      }
      Fl_Button {} {
        label Clear
        callback {for (int i=0;i<MAX_AD_HARMONICS;i++){
    h[i]->mag->value(64);
    oscil->Phmag[i]=64;
    h[i]->phase->value(64);
    oscil->Phphase[i]=64;
};
oscil->Phmag[0]=127;
h[0]->mag->value(0);

for (int i=0;i<MAX_AD_HARMONICS;i++){
  if (oscil->Phmag[i]==64) h[i]->mag->selection_color(0);
     else h[i]->mag->selection_color(222);
};

//harmonics->redraw();

pthread_mutex_lock(&master->mutex);
 oscil->prepare();
pthread_mutex_unlock(&master->mutex);

oscildisplaygroup->redraw();
oldosc->redraw();}
        xywh {680 340 50 20} box THIN_UP_BOX labelfont 1 labelsize 12
      }
      Fl_Group {} {
        xywh {145 305 185 30} box ENGRAVED_BOX
      } {
        Fl_Choice wshbutton {
          label {Wsh.}
          callback {oscil->Pwaveshapingfunction=(int) o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();} open
          tooltip {Waveshaping function} xywh {175 310 55 20} down_box BORDER_BOX labelsize 10 textsize 10
          code0 {o->value(oscil->Pwaveshapingfunction);}
        } {
          menuitem {} {
            label None
            xywh {25 25 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Atan
            xywh {35 35 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Asym1
            xywh {45 45 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Pow
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Sine
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Qnts
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Zigzg
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Lmt
            xywh {95 95 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label LmtU
            xywh {105 105 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label LmtL
            xywh {115 115 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label ILmt
            xywh {127 127 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Clip
            xywh {137 137 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Asym2
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Pow2
            xywh {95 95 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Sgm
            xywh {90 90 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Value_Slider {} {
          callback {oscil->Pwaveshaping=(int)o->value()+64;
//basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Waveshaping Parameter} xywh {230 315 95 10} type {Horz Knob} box FLAT_BOX labelsize 10 align 5 minimum -64 maximum 63 step 1
          code0 {o->value(oscil->Pwaveshaping-64);}
        }
      }
      Fl_Light_Button autoclearbutton {
        label {Clr.}
        tooltip {Auto clear when using the oscillator as base function} xywh {105 310 35 20} box THIN_UP_BOX value 1 labelfont 1 labelsize 10
      }
      Fl_Group {} {
        xywh {330 305 160 30} box ENGRAVED_BOX
      } {
        Fl_Choice fltbutton {
          label Filter
          callback {oscil->Pfiltertype=(int) o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscillator's filter type} xywh {360 310 50 20} down_box BORDER_BOX labelsize 10 textsize 10
          code0 {o->value(oscil->Pfiltertype);}
        } {
          menuitem {} {
            label None
            xywh {35 35 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label LP1
            xywh {45 45 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label HP1a
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label HP1b
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label BP1
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label BS1
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label LP2
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label HP2
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label BP2
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label BS2
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Cos
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Sin
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial {} {
          callback {oscil->Pfilterpar=(int)o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscillator's filter parameter} xywh {415 310 20 20} maximum 127 step 1
          code0 {o->value(oscil->Pfilterpar);}
          class WidgetPDial
        }
        Fl_Check_Button {} {
          label preF
          callback {oscil->Pfilterbeforews=(int)o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Apply the filter before the waveshaping} xywh {445 310 35 20} down_box DOWN_BOX labelsize 10 align 24
          code0 {o->value(oscil->Pfilterbeforews);}
        }
      }
      Fl_Scroll _this_has_to_be_the_last {
        xywh {15 335 660 250} type HORIZONTAL box ENGRAVED_BOX
      } {
        Fl_Pack harmonics {open
          xywh {20 340 650 225} type HORIZONTAL
          code0 {for (int i=0;i<MAX_AD_HARMONICS;i++){h[i]=new ADOscilharmonic(0,0,20,o->h(),"");h[i]->init(oscil,i,oscildisplaygroup,oldosc,master);}}
        } {}
      }
      Fl_Group basefuncmodulation {
        xywh {580 278 150 25} box ENGRAVED_BOX
        code0 {if ((oscil->Pcurrentbasefunc==0)||(oscil->Pcurrentbasefunc==127)) basefuncmodulation->deactivate();}
      } {
        Fl_Choice {} {
          label {Mod.}
          callback {oscil->Pbasefuncmodulation=(int) o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();} open
          tooltip {Base function modulation} xywh {610 283 50 15} down_box BORDER_BOX labelsize 10 textsize 10
          code0 {o->value(oscil->Pbasefuncmodulation);}
        } {
          menuitem {} {
            label None
            xywh {45 45 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Rev
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Sine
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial {} {
          callback {oscil->Pbasefuncmodulationpar1=(int)o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscillator's modulation parameter 1} xywh {670 283 15 15} maximum 127 step 1
          code0 {o->value(oscil->Pbasefuncmodulationpar1);}
          class WidgetPDial
        }
        Fl_Dial {} {
          callback {oscil->Pbasefuncmodulationpar2=(int)o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscillator's modulation parameter 2} xywh {690 283 15 15} maximum 127 step 1
          code0 {o->value(oscil->Pbasefuncmodulationpar2);}
          class WidgetPDial
        }
        Fl_Dial {} {
          callback {oscil->Pbasefuncmodulationpar3=(int)o->value();
basefuncdisplaygroup->redraw();
oscildisplaygroup->redraw();
oldosc->redraw();} selected
          tooltip {Oscillator's modulation parameter 3} xywh {710 283 15 15} maximum 127 step 1
          code0 {o->value(oscil->Pbasefuncmodulationpar3);}
          class WidgetPDial
        }
      }
      Fl_Choice {} {
        label Normalize
        callback {oscil->Pnormalizemethod=(int) o->value();}
        tooltip {Normalize type (harmonic's sum/RMS) of the oscillator} xywh {680 375 60 20} down_box BORDER_BOX labelsize 10 align 5 textsize 10
        code0 {o->value(oscil->Pnormalizemethod);}
      } {
        menuitem {} {
          label Sum
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        menuitem {} {
          label RMS
          xywh {75 75 100 20} labelfont 1 labelsize 10
        }
        menuitem {} {
          label {F.RMS}
          xywh {85 85 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Group {} {
        xywh {490 305 120 30} box ENGRAVED_BOX
      } {
        Fl_Choice sabutton {
          label {Sp.adj.}
          callback {oscil->Psatype=(int) o->value();
oscildisplaygroup->redraw();
oldosc->redraw();} open
          tooltip {Oscillator's spectrum adjust} xywh {530 310 50 20} down_box BORDER_BOX labelsize 10 textsize 10
          code0 {o->value(oscil->Psatype);}
        } {
          menuitem {} {
            label None
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Pow
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          menuitem {} {
            label Thrs
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial {} {
          callback {oscil->Psapar=(int)o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscillator's spectrum adjust parameter} xywh {585 310 20 20} maximum 127 step 1
          code0 {o->value(oscil->Psapar);}
          class WidgetPDial
        }
      }
      Fl_Group {} {open
        xywh {675 405 75 65} box ENGRAVED_BOX
      } {
        Fl_Counter harmonicshiftcounter {
          label {Harmonic Shift}
          callback {oscil->Pharmonicshift=(int)o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          xywh {680 430 65 15} type Simple labelsize 10 align 129 minimum -64 maximum 64 step 1 textfont 1 textsize 10
          code0 {o->value(oscil->Pharmonicshift);}
        }
        Fl_Check_Button {} {
          label preH
          callback {oscil->Pharmonicshiftfirst=(int)o->value();
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Apply the harmonic shift before the waveshaping and filtering} xywh {710 450 35 15} down_box DOWN_BOX labelsize 10 align 24
          code0 {o->value(oscil->Pharmonicshiftfirst);}
        }
        Fl_Button {} {
          label R
          callback {oscil->Pharmonicshift=0;
harmonicshiftcounter->value(0);
oscildisplaygroup->redraw();
oldosc->redraw();}
          xywh {680 450 25 15} box THIN_UP_BOX labelfont 1 labelsize 10
        }
      }
    }
  }
  Function {ADOscilEditor(OscilGen *oscil_,Fl_Widget *oldosc_,Master *master_)} {} {
    code {oscil=oscil_;
oldosc=oldosc_;
master=master_;
make_window();
osceditUI->show();} {}
  }
  Function {~ADOscilEditor()} {} {
    code {osceditUI->hide();
for (int i=0;i<MAX_AD_HARMONICS;i++) delete (h[i]);
delete (osceditUI);} {}
  }
  decl {OscilGen *oscil;} {}
  decl {Fl_Widget *oldosc;} {}
  decl {ADOscilharmonic *h[MAX_AD_HARMONICS];} {}
  decl {Master *master;} {}
} 

class ADvoicelistitem {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window ADnoteVoiceListItem {
      private xywh {335 489 615 27} type Double hide
      class Fl_Group
    } {
      Fl_Group voicelistitemgroup {
        private xywh {50 0 570 25} box FLAT_BOX
        code0 {if (pars->VoicePar[nvoice].Enabled==0) o->deactivate();}
      } {
        Fl_Value_Slider voicevolume {
          callback {pars->VoicePar[nvoice].PVolume=(int)o->value();}
          tooltip Volume xywh {90 5 115 20} type {Horz Knob} box FLAT_BOX labelsize 8 align 5 maximum 127 step 1
          code0 {o->value(pars->VoicePar[nvoice].PVolume);}
        }
        Fl_Check_Button voiceresonanceenabled {
          callback {pars->VoicePar[nvoice].Presonance=(int)o->value();}
          tooltip {Resonance On/Off} xywh {245 7 15 17} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 12 align 4
          code0 {o->value(pars->VoicePar[nvoice].Presonance);}
        }
        Fl_Value_Slider voicelfofreq {
          callback {pars->VoicePar[nvoice].FreqLfo->Pintensity=(int)o->value();}
          tooltip {Frequency LFO amount} xywh {500 5 115 20} type {Horz Knob} box FLAT_BOX labelsize 8 align 5 maximum 127 step 1
          code0 {o->value(pars->VoicePar[nvoice].FreqLfo->Pintensity);}
        }
        Fl_Dial voicepanning {
          callback {pars->VoicePar[nvoice].PPanning=(int) o->value();}
          tooltip {Panning (leftmost is Random)} xywh {215 5 20 20} box ROUND_UP_BOX labelsize 11 align 4 maximum 127 step 1
          code0 {o->value(pars->VoicePar[nvoice].PPanning);}
          class WidgetPDial
        }
        Fl_Group voiceoscil {open
          xywh {60 5 30 20} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
          code0 {osc=new ADOscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {osc->init(pars->VoicePar[nvoice].OscilSmp,0,pars->VoicePar[nvoice].Poscilphase,master);}
          code2 {if (pars->VoicePar[nvoice].Pextoscil != -1) {osc->init(pars->VoicePar[pars->VoicePar[nvoice].Pextoscil].OscilSmp,master);}}
        } {}
        Fl_Value_Output detunevalueoutput {
          callback {o->value(getdetune((pars->VoicePar[nvoice].PDetuneType==0)?(pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PDetuneType),0,pars->VoicePar[nvoice].PDetune));}
          xywh {265 5 45 20} labelsize 10 align 5 minimum -5000 maximum 5000 step 0.01 textfont 1 textsize 10
          code0 {o->value(getdetune(pars->VoicePar[nvoice].PDetuneType,0,pars->VoicePar[nvoice].PDetune));}
        }
        Fl_Slider voicedetune {
          callback {pars->VoicePar[nvoice].PDetune=(int)o->value()+8192;
detunevalueoutput->do_callback();}
          tooltip {Fine Detune (cents)} xywh {315 5 185 20} type {Horz Knob} box FLAT_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->VoicePar[nvoice].PDetune-8192);}
        }
        Fl_Box noiselabel {
          label N
          callback {if (pars->VoicePar[nvoice].Type==0) {
  o->hide();
  voiceresonanceenabled->activate();
  detunevalueoutput->activate();
  voicedetune->activate();
  voicelfofreq->activate();
  voiceoscil->activate();
} else {
  o->show();
  voiceresonanceenabled->deactivate();
  detunevalueoutput->deactivate();
  voicedetune->deactivate();
  voicelfofreq->deactivate();
  voiceoscil->deactivate();
};}
          xywh {65 5 20 20} labelfont 1 labelsize 16 labelcolor 7
          code0 {if (pars->VoicePar[nvoice].Type==0) o->hide();}
        }
      }
      Fl_Check_Button voiceenabled {
        label 01
        callback {pars->VoicePar[nvoice].Enabled=(int)o->value();
if (o->value()==0) voicelistitemgroup->deactivate();
else voicelistitemgroup->activate();
o->redraw();}
        private xywh {30 5 20 20} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 4
        code0 {char tmp[10];snprintf(tmp,10,"%d",nvoice);o->label(strdup(tmp));}
        code1 {o->value(pars->VoicePar[nvoice].Enabled);}
      }
    }
  }
  Function {ADvoicelistitem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {nvoice=0;
pars=NULL;} {}
  }
  Function {init(ADnoteParameters *parameters,int nvoice_,Master *master_)} {} {
    code {pars=parameters;
nvoice=nvoice_;
master=master_;
make_window();
ADnoteVoiceListItem->show();
end();} {}
  }
  Function {refreshlist()} {} {
    code {voiceenabled->value(pars->VoicePar[nvoice].Enabled);
voiceresonanceenabled->value(pars->VoicePar[nvoice].Presonance);
voicevolume->value(pars->VoicePar[nvoice].PVolume);
voicedetune->value(pars->VoicePar[nvoice].PDetune-8192);
voicepanning->value(pars->VoicePar[nvoice].PPanning);
voicelfofreq->value(pars->VoicePar[nvoice].FreqLfo->Pintensity);
if (pars->VoicePar[nvoice].Pextoscil != -1) {
  osc->init(pars->VoicePar[pars->VoicePar[nvoice].Pextoscil].OscilSmp,0,pars->VoicePar[nvoice].Poscilphase,master);
} else 
  osc->init(pars->VoicePar[nvoice].OscilSmp,0,pars->VoicePar[nvoice].Poscilphase,master);
if (pars->VoicePar[nvoice].Enabled==0) voicelistitemgroup->deactivate();
    else voicelistitemgroup->activate();
detunevalueoutput->do_callback();
noiselabel->do_callback();
ADnoteVoiceListItem->redraw();} {}
  }
  Function {~ADvoicelistitem()} {} {
    code {ADnoteVoiceListItem->hide();
delete(ADnoteVoiceListItem);} {}
  }
  decl {ADnoteParameters *pars;} {}
  decl {int nvoice;} {}
  decl {ADOscilloscope *osc;} {}
  decl {Master *master;} {}
} 

class ADvoiceUI {: {public Fl_Group}
} {
  Function {make_window()} {} {
    Fl_Window ADnoteVoiceParameters {
      label Voice
      xywh {110 101 765 525} type Double hide
      class Fl_Group
    } {
      Fl_Group voiceparametersgroup {
        xywh {0 0 765 525} box THIN_UP_BOX color 48
        code0 {if (pars->VoicePar[nvoice].Enabled==0) o->deactivate();}
      } {
        Fl_Group voicemodegroup {
          xywh {5 5 755 515}
        } {
          Fl_Group voiceFMparametersgroup {
            label MODULATOR
            xywh {530 5 230 515} box THIN_UP_FRAME color 48 labeltype EMBOSSED_LABEL labelfont 1 labelsize 18 align 17
            code0 {if (pars->VoicePar[nvoice].PFMEnabled==0) o->deactivate();}
          } {
            Fl_Group modfrequency {
              label {Mod.FREQUENCY}
              xywh {535 220 220 145} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
            } {
              Fl_Group voiceFMfreqenvgroup {
                label {ADSynth Modulator - Frequency Envelope}
                xywh {540 290 205 70} box FLAT_BOX color 51 align 144
                code0 {o->init(pars->VoicePar[nvoice].FMFreqEnvelope);}
                code1 {if (pars->VoicePar[nvoice].PFMFreqEnvelopeEnabled==0) o->deactivate();}
                class EnvelopeUI
              } {}
              Fl_Check_Button {} {
                label Enable
                callback {pars->VoicePar[nvoice].PFMFreqEnvelopeEnabled=(int)o->value();
if (o->value()==0) voiceFMfreqenvgroup->deactivate();
else voiceFMfreqenvgroup->activate();
o->redraw();}
                tooltip {Forced Relase} xywh {545 295 50 10} down_box DOWN_BOX labelfont 1 labelsize 10
                code0 {o->value(pars->VoicePar[nvoice].PFMFreqEnvelopeEnabled);}
              }
              Fl_Counter {} {
                label {Coarse Det.}
                callback {int k=(int) o->value();
if (k<0) k+=1024;
pars->VoicePar[nvoice].PFMCoarseDetune = k+
   (pars->VoicePar[nvoice].PFMCoarseDetune/1024)*1024;}
                tooltip {Coarse Detune} xywh {540 270 60 15} labelsize 11 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 12
                code0 {int k=pars->VoicePar[nvoice].PFMCoarseDetune%1024;}
                code1 {if (k>=512) k-=1024;}
                code2 {o->value(k);}
                code3 {o->lstep(10);}
              }
              Fl_Text_Display {} {
                xywh {600 270 50 15} labelsize 12 textsize 12
              }
              Fl_Counter {} {
                label Oct
                callback {int k=(int) o->value();
if (k<0) k+=16;
pars->VoicePar[nvoice].PFMCoarseDetune = k*1024+
   pars->VoicePar[nvoice].PFMCoarseDetune%1024;}
                tooltip Octave xywh {660 270 45 15} type Simple labelsize 10 align 5 minimum -8 maximum 7 step 1 textfont 1 textsize 12
                code0 {int k=pars->VoicePar[nvoice].PFMCoarseDetune/1024;}
                code1 {if (k>=8) k-=16;}
                code2 {o->value(k);}
              }
              Fl_Counter {} {
                label Type
                callback {pars->VoicePar[nvoice].PFMDetuneType=(int) o->value();
fmdetunevalueoutput->do_callback();}
                tooltip {The way of how the detune is computed (0 for Default)} xywh {710 270 40 15} type Simple labelsize 10 align 5 minimum 0 maximum 127 step 1 textfont 1 textsize 12
                code0 {o->bounds(0,N_DETUNE_TYPES);}
                code1 {o->value(pars->VoicePar[nvoice].PFMDetuneType);}
              }
              Fl_Slider {} {
                callback {pars->VoicePar[nvoice].PFMDetune=(int)o->value()+8192;
fmdetunevalueoutput->do_callback();}
                tooltip {Fine Detune (cents)} xywh {590 245 160 10} type {Horz Knob} box FLAT_BOX minimum -8192 maximum 8191 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMDetune-8192);}
              }
              Fl_Value_Output fmdetunevalueoutput {
                label Detune
                callback {o->value(getdetune((pars->VoicePar[nvoice].PFMDetuneType==0)?(pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PFMDetuneType),0,pars->VoicePar[nvoice].PFMDetune));}
                xywh {540 245 45 13} labelsize 8 align 5 minimum -5000 maximum 5000 step 0.01 textfont 1 textsize 8
                code0 {o->value(getdetune(pars->VoicePar[nvoice].PFMDetuneType,0,pars->VoicePar[nvoice].PFMDetune));}
              }
            }
            Fl_Group {} {
              label {Mod.AMPLITUDE}
              xywh {535 60 220 160} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
            } {
              Fl_Value_Slider {} {
                label Vol
                callback {pars->VoicePar[nvoice].PFMVolume=(int)o->value();}
                tooltip Volume xywh {540 80 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVolume);}
              }
              Fl_Value_Slider {} {
                label {V.Sns}
                callback {pars->VoicePar[nvoice].PFMVelocityScaleFunction=(int) o->value();}
                tooltip {Velocity Sensing Function (rightmost to disable)} xywh {540 100 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVelocityScaleFunction);}
              }
              Fl_Group voiceFMampenvgroup {
                label {ADSynth Modulator - Amplitude Envelope} open
                xywh {540 145 205 70} box FLAT_BOX color 51 align 144
                code0 {o->init(pars->VoicePar[nvoice].FMAmpEnvelope);}
                code1 {if (pars->VoicePar[nvoice].PFMAmpEnvelopeEnabled==0) o->deactivate();}
                class EnvelopeUI
              } {}
              Fl_Check_Button {} {
                label Enable
                callback {pars->VoicePar[nvoice].PFMAmpEnvelopeEnabled=(int)o->value();
if (o->value()==0) voiceFMampenvgroup->deactivate();
else voiceFMampenvgroup->activate();
o->redraw();}
                tooltip {Forced Relase} xywh {545 150 50 10} down_box DOWN_BOX labelfont 1 labelsize 10
                code0 {o->value(pars->VoicePar[nvoice].PFMAmpEnvelopeEnabled);}
              }
              Fl_Value_Slider {} {
                label {F.Damp}
                callback {pars->VoicePar[nvoice].PFMVolumeDamp=(int) o->value()+64;}
                tooltip {Modulator Damp at Higher frequency} xywh {540 120 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 minimum -64 maximum 63 step 1
                code0 {o->value(pars->VoicePar[nvoice].PFMVolumeDamp-64);}
              }
            }
            Fl_Group modoscil {
              xywh {535 365 220 150}
            } {
              Fl_Group fmoscil {open
                xywh {535 405 220 110} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
                code0 {oscFM=new ADOscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
                code1 {int nv=nvoice; if (pars->VoicePar[nvoice].PextFMoscil>=0) nv=pars->VoicePar[nvoice].PextFMoscil;}
                code2 {oscFM->init(pars->VoicePar[nv].FMSmp,0,pars->VoicePar[nvoice].PFMoscilphase,master);}
              } {}
              Fl_Box {} {
                label {Modullator Oscillator}
                xywh {535 365 155 20} labelfont 1 align 20
              }
              Fl_Button changeFMoscilbutton {
                label Change
                callback {if (oscedit!=NULL) delete(oscedit);

int nv=nvoice;
if (pars->VoicePar[nvoice].PextFMoscil>=0) nv=pars->VoicePar[nvoice].PextFMoscil;

oscedit=new ADOscilEditor(pars->VoicePar[nv].FMSmp,fmoscil,master);}
                xywh {700 370 55 15} box THIN_UP_BOX labelfont 1 labelsize 12
                code0 {if (pars->VoicePar[nvoice].PextFMoscil>=0) o->labelcolor(FL_BLUE);}
              }
              Fl_Counter {} {
                label {Ext.}
                callback {pars->VoicePar[nvoice].PextFMoscil=(int)o->value();
if ((int) o->value() != -1) {
    oscFM->init(pars->VoicePar[(int) o->value()].FMSmp,master);
    changeFMoscilbutton->labelcolor(FL_BLUE);
} else { 
    oscFM->init(pars->VoicePar[nvoice].FMSmp,master);
    changeFMoscilbutton->labelcolor(FL_BLACK);
};
voiceFMparametersgroup->redraw();}
                tooltip {External Oscillator ( -1 for internal)} xywh {570 385 81 20} type Simple labelfont 1 labelsize 12 align 4 minimum -1 maximum 127 step 1 value -1 textfont 1
                code0 {o->bounds(-1,nvoice-1);}
                code1 {o->value(pars->VoicePar[nvoice].PextFMoscil);}
              }
              Fl_Slider {} {
                label Phase
                callback {pars->VoicePar[nvoice].PFMoscilphase=64-(int)o->value();
oscFM->phase=64-(int) o->value();
fmoscil->redraw();}
                xywh {665 395 65 10} type {Horz Knob} box FLAT_BOX labelsize 10 align 5 minimum -64 maximum 63 step 1
                code0 {o->value(64-pars->VoicePar[nvoice].PFMoscilphase);}
              }
            }
            Fl_Counter {} {
              label {Ext. Mod.}
              callback {pars->VoicePar[nvoice].PFMVoice=(int)o->value();
if ((int) o->value() != -1) {
    modoscil->deactivate();
    modfrequency->deactivate();
} else { 
    modoscil->activate();
    modfrequency->activate();
};
voiceFMparametersgroup->redraw();}
              tooltip {External Modulator voice ( -1 for internal)} xywh {640 40 70 20} type Simple align 5 minimum -1 maximum 127 step 1 value -1 textfont 1
              code0 {o->bounds(-1,nvoice-1);}
              code1 {o->value(pars->VoicePar[nvoice].PFMVoice);}
              code2 {if ((int) o->value() != -1) {modoscil->deactivate();modfrequency->deactivate();}}
            }
          }
          Fl_Choice {} {
            label {Type:}
            callback {pars->VoicePar[nvoice].PFMEnabled=(int)o->value();
if (o->value()==0) voiceFMparametersgroup->deactivate();
else voiceFMparametersgroup->activate();
o->redraw();}
            xywh {535 40 80 20} down_box BORDER_BOX align 5
            code0 {o->value(pars->VoicePar[nvoice].PFMEnabled);}
          } {
            menuitem {} {
              label OFF
              xywh {40 40 100 20} labelfont 1
            }
            menuitem {} {
              label MORPH
              xywh {50 50 100 20} labelfont 1
            }
            menuitem {} {
              label RING
              xywh {60 60 100 20} labelfont 1
            }
            menuitem {} {
              label PM
              xywh {70 70 100 20} labelfont 1
            }
            menuitem {} {
              label FM
              xywh {80 80 100 20} labelfont 1
            }
            menuitem {} {
              label PITCH
              xywh {90 90 100 20} labelfont 1 deactivate
            }
          }
          Fl_Group {} {
            label FREQUENCY
            xywh {5 250 525 120} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
          } {
            Fl_Group voicefreqenvgroup {
              label {ADSynth Voice - Frequency Envelope} open
              xywh {10 290 205 70} box FLAT_BOX color 51 align 144
              code0 {o->init(pars->VoicePar[nvoice].FreqEnvelope);}
              code1 {if (pars->VoicePar[nvoice].PFreqEnvelopeEnabled==0) o->deactivate();}
              class EnvelopeUI
            } {}
            Fl_Check_Button {} {
              label Enable
              callback {pars->VoicePar[nvoice].PFreqEnvelopeEnabled=(int)o->value();
if (o->value()==0) voicefreqenvgroup->deactivate();
else voicefreqenvgroup->activate();
o->redraw();}
              tooltip {Forced Relase} xywh {15 295 50 10} down_box DOWN_BOX labelfont 1 labelsize 10
              code0 {o->value(pars->VoicePar[nvoice].PFreqEnvelopeEnabled);}
            }
            Fl_Group voicefreqlfogroup {
              label {Frequency LFO} open
              xywh {215 290 230 70} box FLAT_BOX color 47 align 144
              code0 {o->init(pars->VoicePar[nvoice].FreqLfo);}
              code1 {if (pars->VoicePar[nvoice].PFreqLfoEnabled==0) o->deactivate();}
              class LFOUI
            } {}
            Fl_Check_Button {} {
              label Enable
              callback {pars->VoicePar[nvoice].PFreqLfoEnabled=(int)o->value();
if (o->value()==0) voicefreqlfogroup->deactivate();
else voicefreqlfogroup->activate();
o->redraw();}
              tooltip {Forced Relase} xywh {220 295 55 10} down_box DOWN_BOX labelfont 1 labelsize 12 align 24
              code0 {o->value(pars->VoicePar[nvoice].PFreqLfoEnabled);}
            }
            Fl_Counter {} {
              label Oct
              callback {int k=(int) o->value();
if (k<0) k+=16;
pars->VoicePar[nvoice].PCoarseDetune = k*1024+
   pars->VoicePar[nvoice].PCoarseDetune%1024;}
              tooltip Octave xywh {480 315 45 20} type Simple labelsize 10 align 4 minimum -8 maximum 7 step 1 textfont 1 textsize 12
              code0 {int k=pars->VoicePar[nvoice].PCoarseDetune/1024;}
              code1 {if (k>=8) k-=16;}
              code2 {o->value(k);}
            }
            Fl_Counter {} {
              label Type
              callback {pars->VoicePar[nvoice].PDetuneType=(int) o->value();
detunevalueoutput->do_callback();}
              tooltip {The way of how the detune is computed (0 for Default)} xywh {485 340 40 15} type Simple labelsize 10 align 4 minimum 0 maximum 127 step 1 textfont 1 textsize 12
              code0 {o->bounds(0,N_DETUNE_TYPES);}
              code1 {o->value(pars->VoicePar[nvoice].PDetuneType);}
            }
            Fl_Counter {} {
              label {Coarse Det.}
              callback {int k=(int) o->value();
if (k<0) k+=1024;
pars->VoicePar[nvoice].PCoarseDetune = k+
   (pars->VoicePar[nvoice].PCoarseDetune/1024)*1024;}
              tooltip {Coarse Detune} xywh {465 270 60 20} labelsize 11 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 12
              code0 {int k=pars->VoicePar[nvoice].PCoarseDetune%1024;}
              code1 {if (k>=512) k-=1024;}
              code2 {o->value(k);}
              code3 {o->lstep(10);}
            }
            Fl_Text_Display {} {
              xywh {465 290 60 15} labelsize 12 textsize 12
            }
            Fl_Slider {} {
              callback {pars->VoicePar[nvoice].PDetune=(int)o->value()+8192;
detunevalueoutput->do_callback();}
              tooltip {Fine Detune (cents)} xywh {58 272 392 13} type {Horz Knob} box FLAT_BOX minimum -8192 maximum 8191 step 1
              code0 {o->value(pars->VoicePar[nvoice].PDetune-8192);}
            }
            Fl_Value_Output detunevalueoutput {
              label Detune
              callback {o->value(getdetune((pars->VoicePar[nvoice].PDetuneType==0)?(pars->GlobalPar.PDetuneType) : (pars->VoicePar[nvoice].PDetuneType),0,pars->VoicePar[nvoice].PDetune));}
              xywh {10 272 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 step 0.01 textfont 1 textsize 10
              code0 {o->value(getdetune(pars->VoicePar[nvoice].PDetuneType,0,pars->VoicePar[nvoice].PDetune));}
            }
            Fl_Check_Button {} {
              label 440Hz
              callback {int x=(int) o->value();
pars->VoicePar[nvoice].Pfixedfreq=x;
if (x==0) fixedfreqetdial->deactivate();
    else fixedfreqetdial->activate();}
              tooltip {Set the voice base frequency to 440Hz} xywh {345 253 55 15} down_box DOWN_BOX labelfont 1 labelsize 12
              code0 {o->value(pars->VoicePar[nvoice].Pfixedfreq);}
            }
            Fl_Dial fixedfreqetdial {
              label {Eq.T.}
              callback {pars->VoicePar[nvoice].PfixedfreqET=(int) o->value();}
              tooltip {How the frequency varies acording to the keyboard (leftmost for fixed frequency)} xywh {405 255 15 15} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->VoicePar[nvoice].PfixedfreqET);}
              code1 {if (pars->VoicePar[nvoice].Pfixedfreq==0) o->deactivate();}
              class WidgetPDial
            }
          }
          Fl_Group voiceoscil {
            xywh {80 375 445 145} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
            code0 {osc=new ADOscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {int nv=nvoice; if (pars->VoicePar[nvoice].Pextoscil>=0) nv=pars->VoicePar[nvoice].Pextoscil;}
            code2 {osc->init(pars->VoicePar[nv].OscilSmp,0,pars->VoicePar[nvoice].Poscilphase,master);}
          } {}
          Fl_Button changevoiceoscilbutton {
            label Change
            callback {if (oscedit!=NULL) delete(oscedit);

int nv=nvoice;
if (pars->VoicePar[nvoice].Pextoscil>=0) nv=pars->VoicePar[nvoice].Pextoscil;

oscedit=new ADOscilEditor(pars->VoicePar[nv].OscilSmp,voiceoscil,master);}
            xywh {5 475 65 20} box THIN_UP_BOX labelfont 1 labelsize 12
            code0 {if (pars->VoicePar[nvoice].Pextoscil>=0) o->labelcolor(FL_BLUE);}
          }
          Fl_Box {} {
            label {Voice Oscillator}
            xywh {5 375 75 35} labelfont 1 align 128
          }
          Fl_Slider {} {
            label Phase
            callback {pars->VoicePar[nvoice].Poscilphase=64-(int)o->value();
osc->phase=64-(int) o->value();
voiceoscil->redraw();}
            xywh {10 420 65 10} type {Horz Knob} box FLAT_BOX labelsize 10 align 5 minimum -64 maximum 63 step 1
            code0 {o->value(64-pars->VoicePar[nvoice].Poscilphase);}
          }
          Fl_Counter {} {
            label {Ext. Oscil.}
            callback {pars->VoicePar[nvoice].Pextoscil=(int)o->value();
if ((int) o->value() != -1) {
    osc->init(pars->VoicePar[(int) o->value()].OscilSmp,master);
    changevoiceoscilbutton->labelcolor(FL_BLUE);
} else { 
    osc->init(pars->VoicePar[nvoice].OscilSmp,master);
    changevoiceoscilbutton->labelcolor(FL_BLACK);
};

voiceparametersgroup->redraw();
voiceonbutton->redraw();}
            tooltip {External Oscillator ( -1 for internal)} xywh {5 450 70 20} type Simple labelsize 12 align 5 minimum -1 maximum 127 step 1 value -1 textfont 1
            code0 {o->bounds(-1,nvoice-1);}
            code1 {o->value(pars->VoicePar[nvoice].Pextoscil);}
          }
          Fl_Check_Button {} {
            label {R.}
            callback {pars->VoicePar[nvoice].Presonance=(int) o->value();}
            tooltip {Resonance On/Off} xywh {210 5 35 35} box THIN_UP_BOX down_box DOWN_BOX labelfont 1 labelsize 12
            code0 {o->value(pars->VoicePar[nvoice].Presonance);}
          }
        }
        Fl_Group {} {
          label AMPLITUDE
          xywh {5 40 240 210} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
        } {
          Fl_Value_Slider {} {
            label Vol
            callback {pars->VoicePar[nvoice].PVolume=(int)o->value();}
            tooltip Volume xywh {10 60 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PVolume);}
          }
          Fl_Value_Slider {} {
            label {V.Sns}
            callback {pars->VoicePar[nvoice].PAmpVelocityScaleFunction=(int) o->value();}
            tooltip {Velocity Sensing Function (rightmost to disable)} xywh {10 80 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PAmpVelocityScaleFunction);}
          }
          Fl_Group voiceampenvgroup {
            label {ADSynth Voice - Amplitude Envelope} open
            xywh {10 105 205 70} box FLAT_BOX color 51 align 144
            code0 {o->init(pars->VoicePar[nvoice].AmpEnvelope);}
            code1 {if (pars->VoicePar[nvoice].PAmpEnvelopeEnabled==0) o->deactivate();}
            class EnvelopeUI
          } {}
          Fl_Dial {} {
            label Pan
            callback {pars->VoicePar[nvoice].PPanning=(int) o->value();}
            tooltip {Panning (leftmost is Random)} xywh {210 60 30 30} box ROUND_UP_BOX labelsize 11 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PPanning);}
            class WidgetPDial
          }
          Fl_Check_Button {} {
            label Enable
            callback {pars->VoicePar[nvoice].PAmpEnvelopeEnabled=(int)o->value();
if (o->value()==0) voiceampenvgroup->deactivate();
else voiceampenvgroup->activate();
o->redraw();}
            tooltip {Forced Relase} xywh {15 110 50 10} down_box DOWN_BOX labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PAmpEnvelopeEnabled);}
          }
          Fl_Group voiceamplfogroup {
            label {Amplitude LFO} open
            xywh {10 175 230 70} box FLAT_BOX color 47 align 144
            code0 {o->init(pars->VoicePar[nvoice].AmpLfo);}
            code1 {if (pars->VoicePar[nvoice].PAmpLfoEnabled==0) o->deactivate();}
            class LFOUI
          } {}
          Fl_Check_Button {} {
            label Enable
            callback {pars->VoicePar[nvoice].PAmpLfoEnabled=(int)o->value();
if (o->value()==0) voiceamplfogroup->deactivate();
else voiceamplfogroup->activate();
o->redraw();}
            tooltip {Forced Relase} xywh {15 180 55 10} down_box DOWN_BOX labelfont 1 labelsize 12 align 24
            code0 {o->value(pars->VoicePar[nvoice].PAmpLfoEnabled);}
          }
          Fl_Check_Button {} {
            label Minus
            callback {pars->VoicePar[nvoice].PVolumeminus=(int)o->value();}
            xywh {10 45 50 10} down_box DOWN_BOX labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PVolumeminus);}
          }
        }
        Fl_Group voicefiltergroup {
          label FILTER
          xywh {245 5 285 245} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
          code0 {if (pars->VoicePar[nvoice].PFilterEnabled==0) o->deactivate();}
        } {
          Fl_Group {} {
            label {ADsynth Voice - Filter} open
            xywh {250 30 275 75} box FLAT_BOX color 50 align 144
            code0 {o->init(pars->VoicePar[nvoice].VoiceFilter,NULL,NULL);}
            class FilterUI
          } {}
          Fl_Group voicefilterenvgroup {
            label {ADSynth Voice - Filter Envelope} open
            xywh {250 105 275 70} box FLAT_BOX color 51 align 144
            code0 {o->init(pars->VoicePar[nvoice].FilterEnvelope);}
            code1 {if (pars->VoicePar[nvoice].PFilterEnvelopeEnabled==0) o->deactivate();}
            class EnvelopeUI
          } {}
          Fl_Check_Button {} {
            label Enable
            callback {pars->VoicePar[nvoice].PFilterEnvelopeEnabled=(int)o->value();
if (o->value()==0) voicefilterenvgroup->deactivate();
else voicefilterenvgroup->activate();
o->redraw();}
            tooltip {Forced Relase} xywh {255 110 55 10} down_box DOWN_BOX labelfont 1 labelsize 10
            code0 {o->value(pars->VoicePar[nvoice].PFilterEnvelopeEnabled);}
          }
          Fl_Group voicefilterlfogroup {
            label {Filter LFO} open
            xywh {250 175 230 70} box FLAT_BOX color 47 align 144
            code0 {o->init(pars->VoicePar[nvoice].FilterLfo);}
            code1 {if (pars->VoicePar[nvoice].PFilterLfoEnabled==0) o->deactivate();}
            class LFOUI
          } {}
          Fl_Check_Button {} {
            label Enable
            callback {pars->VoicePar[nvoice].PFilterLfoEnabled=(int)o->value();
if (o->value()==0) voicefilterlfogroup->deactivate();
else voicefilterlfogroup->activate();
o->redraw();}
            tooltip {Forced Relase} xywh {255 180 55 10} down_box DOWN_BOX labelfont 1 labelsize 12 align 24
            code0 {o->value(pars->VoicePar[nvoice].PFilterLfoEnabled);}
          }
        }
        Fl_Group {} {
          label 01
          xywh {5 5 55 35} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 30 align 16
          code0 {char tmp[10];snprintf(tmp,10,"%d",nvoice);o->label(strdup(tmp));}
        } {}
        Fl_Choice {} {
          callback {int x=(int) o->value();
pars->VoicePar[nvoice].Type=x;
if (x==0) voicemodegroup->activate();
  else voicemodegroup->deactivate();
noiselabel->do_callback();}
          tooltip {Oscillator Type (sound/noise)} xywh {5 500 65 20} down_box BORDER_BOX labelsize 11 textfont 1 textsize 11
          code0 {o->value(pars->VoicePar[nvoice].Type);}
          code1 {if (pars->VoicePar[nvoice].Type!=0) voicemodegroup->deactivate();}
        } {
          menuitem {} {
            label Sound
            xywh {5 5 100 20} labelfont 1 labelsize 13
          }
          menuitem {} {
            label NOISE
            xywh {15 15 100 20} labelfont 1 labelsize 13 labelcolor 1
          }
        }
        Fl_Check_Button bypassfiltercheckbutton {
          label {Bypass Global F.}
          callback {pars->VoicePar[nvoice].Pfilterbypass=(int)o->value();}
          xywh {425 10 100 20} down_box DOWN_BOX labelfont 1 labelsize 10 align 148
          code0 {o->value(pars->VoicePar[nvoice].Pfilterbypass);}
        }
        Fl_Group {} {
          xywh {115 5 95 35} box THIN_UP_BOX
        } {
          Fl_Value_Slider {} {
            label Delay
            callback {pars->VoicePar[nvoice].PDelay=(int)o->value();}
            tooltip Volume xywh {120 21 84 12} type {Horz Knob} box FLAT_BOX labelsize 12 align 5 maximum 127 step 1
            code0 {o->value(pars->VoicePar[nvoice].PDelay);}
          }
        }
        Fl_Check_Button {} {
          label Enable
          callback {pars->VoicePar[nvoice].PFilterEnabled=(int)o->value();
if (o->value()==0) voicefiltergroup->deactivate();
else voicefiltergroup->activate();
o->redraw();
bypassfiltercheckbutton->redraw();}
          tooltip {Enable Filter} xywh {250 15 60 15} down_box DOWN_BOX labelfont 1 labelsize 12
          code0 {o->value(pars->VoicePar[nvoice].PFilterEnabled);}
        }
        Fl_Box noiselabel {
          label {White Noise}
          callback {if (pars->VoicePar[nvoice].Type==0) o->hide(); else o->show();}
          xywh {150 415 300 65} labelfont 1 labelsize 50 labelcolor 7
          code0 {if (pars->VoicePar[nvoice].Type==0) o->hide(); else o->show();}
        }
      }
      Fl_Check_Button voiceonbutton {
        label On
        callback {pars->VoicePar[nvoice].Enabled=(int)o->value();
if (o->value()==0) voiceparametersgroup->deactivate();
else voiceparametersgroup->activate();
o->redraw();}
        xywh {60 5 55 35} box THIN_UP_BOX down_box DOWN_BOX labelfont 1 labelsize 16
        code0 {o->value(pars->VoicePar[nvoice].Enabled);}
      }
    }
  }
  Function {ADvoiceUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {nvoice=0;
pars=NULL;
oscedit=NULL;} {}
  }
  Function {init(ADnoteParameters *parameters,int nvoice_,Master *master_)} {} {
    code {pars=parameters;
nvoice=nvoice_;
master=master_;
make_window();
end();
ADnoteVoiceParameters->show();} {}
  }
  Function {~ADvoiceUI()} {} {
    code {ADnoteVoiceParameters->hide();
hide();
if (oscedit!=NULL) {
    delete(oscedit);
};
delete (ADnoteVoiceParameters);} {}
  }
  decl {int nvoice;} {}
  decl {ADnoteParameters *pars;} {}
  decl {ADOscilEditor *oscedit;} {}
  decl {ADOscilloscope *osc;} {}
  decl {ADOscilloscope *oscFM;} {}
  decl {Master *master;} {}
} 

class ADnoteUI {} {
  Function {make_window()} {private
  } {
    Fl_Window ADnoteGlobalParameters {
      label {ADsynth Global Parameters of the Instrument}
      xywh {112 194 535 405} type Double hide
    } {
      Fl_Group {} {
        label FREQUENCY
        xywh {5 255 525 115} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
      } {
        Fl_Group {} {
          label {ADSynth Global - Frequency Envelope} open
          xywh {10 295 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->GlobalPar.FreqEnvelope);}
          class EnvelopeUI
        } {}
        Fl_Counter {} {
          label Oct
          callback {int k=(int) o->value();
if (k<0) k+=16;
pars->GlobalPar.PCoarseDetune = k*1024+
   pars->GlobalPar.PCoarseDetune%1024;}
          tooltip Octave xywh {480 320 45 20} type Simple labelsize 10 align 4 minimum -8 maximum 7 step 1 textfont 1 textsize 12
          code0 {int k=pars->GlobalPar.PCoarseDetune/1024;}
          code1 {if (k>=8) k-=16;}
          code2 {o->value(k);}
        }
        Fl_Counter {} {
          label Type
          callback {pars->GlobalPar.PDetuneType=(int) o->value();
detunevalueoutput->do_callback();}
          tooltip {The way of how the detune is computed (Default)} xywh {485 345 40 15} type Simple labelsize 10 align 4 minimum 1 maximum 127 step 1 textfont 1 textsize 12
          code0 {o->bounds(1,N_DETUNE_TYPES);}
          code1 {o->value(pars->GlobalPar.PDetuneType);}
        }
        Fl_Counter {} {
          label {C.det}
          callback {int k=(int) o->value();
if (k<0) k+=1024;
pars->GlobalPar.PCoarseDetune = k+
   (pars->GlobalPar.PCoarseDetune/1024)*1024;}
          tooltip {Coarse Detune} xywh {465 270 60 20} labelsize 10 align 5 minimum -64 maximum 63 step 1 textfont 1 textsize 12
          code0 {int k=pars->GlobalPar.PCoarseDetune%1024;}
          code1 {if (k>=512) k-=1024;}
          code2 {o->value(k);}
          code3 {o->lstep(10);}
        }
        Fl_Text_Display {} {
          xywh {465 290 60 15} labelsize 12 textsize 12
        }
        Fl_Group {} {
          label {Frequency LFO} open
          xywh {215 295 230 70} box FLAT_BOX color 47 align 144
          code0 {o->init(pars->GlobalPar.FreqLfo);}
          class LFOUI
        } {}
        Fl_Slider {} {
          callback {pars->GlobalPar.PDetune=(int)o->value()+8192;
detunevalueoutput->do_callback();}
          tooltip {Fine Detune (cents)} xywh {60 275 390 15} type {Horz Knob} box FLAT_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->GlobalPar.PDetune-8192);}
        }
        Fl_Value_Output detunevalueoutput {
          label Detune
          callback {o->value(getdetune(pars->GlobalPar.PDetuneType,0,pars->GlobalPar.PDetune));}
          xywh {12 275 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 step 0.01 textfont 1 textsize 10
          code0 {o->value(getdetune(pars->GlobalPar.PDetuneType,0,pars->GlobalPar.PDetune));}
        }
      }
      Fl_Group {} {
        label AMPLITUDE
        xywh {5 5 240 250} box THIN_UP_FRAME labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
      } {
        Fl_Value_Slider {} {
          label Vol
          callback {pars->GlobalPar.PVolume=(int)o->value();}
          tooltip Volume xywh {10 30 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PVolume);}
        }
        Fl_Value_Slider {} {
          label {V.Sns}
          callback {pars->GlobalPar.PAmpVelocityScaleFunction=(int) o->value();}
          tooltip {Velocity Sensing Function (rightmost to disable)} xywh {10 50 160 15} type {Horz Knob} box FLAT_BOX labelsize 12 align 8 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PAmpVelocityScaleFunction);}
        }
        Fl_Dial {} {
          label Pan
          callback {pars->GlobalPar.PPanning=(int) o->value();}
          tooltip {Panning (leftmost is Random)} xywh {210 25 30 30} box ROUND_UP_BOX labelsize 11 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPanning);}
          class WidgetPDial
        }
        Fl_Dial {} {
          label {P.Str.}
          callback {pars->GlobalPar.PPunchStrength=(int) o->value();}
          tooltip {Punch Strength} xywh {125 227 25 25} box ROUND_UP_BOX labelsize 11 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchStrength);}
          class WidgetPDial
        }
        Fl_Dial {} {
          label {P.t.}
          callback {pars->GlobalPar.PPunchTime=(int) o->value();}
          tooltip {Punch Time (duration)} xywh {155 227 25 25} box ROUND_UP_BOX labelsize 11 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchTime);}
          class WidgetPDial
        }
        Fl_Dial {} {
          label {P.Stc.}
          callback {pars->GlobalPar.PPunchStretch=(int) o->value();}
          tooltip {Punch Stretch} xywh {185 227 25 25} box ROUND_UP_BOX labelsize 11 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchStretch);}
          class WidgetPDial
        }
        Fl_Dial {} {
          label {P.Vel.}
          callback {pars->GlobalPar.PPunchVelocitySensing=(int) o->value();}
          tooltip {Punch Velocity Sensing} xywh {215 227 25 25} box ROUND_UP_BOX labelsize 11 align 1 maximum 127 step 1
          code0 {o->value(pars->GlobalPar.PPunchVelocitySensing);}
          class WidgetPDial
        }
        Fl_Group {} {
          label {ADSynth Global - Amplitude Envelope} open
          xywh {10 75 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->GlobalPar.AmpEnvelope);}
          class EnvelopeUI
        } {}
        Fl_Group {} {
          label {Amplitude LFO} open
          xywh {10 145 230 70} box FLAT_BOX color 47 align 144
          code0 {o->init(pars->GlobalPar.AmpLfo);}
          class LFOUI
        } {}
      }
      Fl_Group {} {
        label FILTER
        xywh {245 5 285 250} box THIN_UP_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 16 align 17
      } {
        Fl_Group {} {
          label {ADSynth Global - Filter Envelope} open
          xywh {250 110 275 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->GlobalPar.FilterEnvelope);}
          class EnvelopeUI
        } {}
        Fl_Group {} {
          label {Filter LFO} open
          xywh {250 180 230 70} box FLAT_BOX color 47 align 144
          code0 {o->init(pars->GlobalPar.FilterLfo);}
          class LFOUI
        } {}
        Fl_Group {} {
          label {ADsynth Global - Filter} open
          xywh {250 35 275 75} box FLAT_BOX color 50 align 144
          code0 {o->init(pars->GlobalPar.GlobalFilter,&pars->GlobalPar.PFilterVelocityScale,&pars->GlobalPar.PFilterVelocityScaleFunction);}
          class FilterUI
        } {}
      }
      Fl_Check_Button {} {
        label Stereo
        callback {pars->GlobalPar.PStereo=(int) o->value();}
        xywh {5 220 80 35} box ENGRAVED_BOX down_box DOWN_BOX labelfont 1 labelsize 12
        code0 {o->value(pars->GlobalPar.PStereo);}
      }
      Fl_Button {} {
        label {Show Voice List}
        callback {for (int i=0;i<NUM_VOICES;i++){
  voicelistitem[i]->refreshlist();
}
ADnoteVoiceList->show();}
        xywh {180 375 125 25}
      }
      Fl_Button {} {
        label {Show Voice Parameters}
        callback {ADnoteVoice->show();}
        xywh {5 375 170 25} labelfont 1
      }
      Fl_Button {} {
        label Close
        callback {ADnoteGlobalParameters->hide();}
        xywh {430 375 100 25} box THIN_UP_BOX
      }
      Fl_Button {} {
        label Resonance
        callback {resui->resonancewindow->redraw();
resui->resonancewindow->show();}
        tooltip Resonance xywh {309 375 86 25} box THIN_UP_BOX
      }
    }
    Fl_Window ADnoteVoiceList {
      label {ADsynth Voices list}
      xywh {32 266 650 260} type Double hide
    } {
      Fl_Text_Display {} {
        label {No.}
        xywh {10 15 30 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Text_Display {} {
        label Vol
        xywh {145 15 30 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Text_Display {} {
        label Detune
        xywh {384 15 25 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Text_Display {} {
        label Pan
        xywh {210 15 30 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Text_Display {} {
        label {Vib. Depth}
        xywh {560 15 30 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Text_Display {} {
        label {R.}
        xywh {245 15 25 10} box NO_BOX labelfont 1 labelsize 13
      }
      Fl_Button {} {
        label {Hide Voice List}
        callback {ADnoteVoiceList->hide();}
        xywh {255 237 125 20}
      }
      Fl_Scroll {} {open
        xywh {0 15 640 220} type VERTICAL box THIN_UP_BOX
      } {
        Fl_Pack {} {open
          xywh {0 20 620 210}
          code0 {for (int i=0;i<NUM_VOICES;i++){voicelistitem[i]=new ADvoicelistitem(0,0,620,25,"");voicelistitem[i]->init(pars,i,master);}}
        } {}
      }
    }
    Fl_Window ADnoteVoice {
      label {ADsynth Voice Parameters}
      xywh {53 58 765 560} type Double hide
    } {
      Fl_Group advoice {
        xywh {0 0 760 525} box BORDER_BOX
        code0 {o->init(pars,nvoice,master);}
        code1 {o->show();}
        class ADvoiceUI
      } {}
      Fl_Counter currentvoicecounter {
        label {Current Voice}
        callback {nvoice=(int)o->value();
advoice->hide();
ADnoteVoice->remove(advoice);
delete advoice;
advoice=new ADvoiceUI(0,0,765,525);
ADnoteVoice->add(advoice);
advoice->init(pars,nvoice,master);
advoice->show();
ADnoteVoice->redraw();}
        xywh {5 530 130 25} type Simple labelfont 1 align 8 minimum 0 maximum 0 step 1 textfont 1 textsize 18
        code0 {o->bounds(0,NUM_VOICES-1);}
      }
      Fl_Button {} {
        label {Close Window}
        callback {ADnoteVoice->hide();}
        xywh {300 530 195 25} box THIN_UP_BOX labelfont 1
      }
      Fl_Button {} {
        label Copy
        callback {pthread_mutex_lock(&master->mutex);
  pars->copypastevoice(nvoice,0);
pthread_mutex_unlock(&master->mutex);}
        tooltip {Copy the voice to clipboard} xywh {655 530 50 20} box THIN_UP_BOX
      }
      Fl_Button {} {
        label Paste
        callback {pthread_mutex_lock(&master->mutex);
  pars->copypastevoice(nvoice,1);
pthread_mutex_unlock(&master->mutex);

currentvoicecounter->do_callback();}
        tooltip {Paste the voice from the clipboard} xywh {710 530 50 20} box THIN_UP_BOX
      }
    }
  }
  Function {ADnoteUI(ADnoteParameters *parameters,Master *master_)} {} {
    code {pars=parameters;
master=master_;
nvoice=0;
resui=new ResonanceUI(pars->GlobalPar.Reson);
make_window();} {}
  }
  Function {~ADnoteUI()} {} {
    code {ADnoteVoiceList->hide();
ADnoteGlobalParameters->hide();
ADnoteVoice->hide();
delete(ADnoteVoiceList);
delete(ADnoteGlobalParameters);
delete(ADnoteVoice);
delete(resui);} {}
  }
  decl {ADnoteParameters *pars;} {}
  decl {ResonanceUI *resui;} {}
  decl {Master *master;} {}
  decl {int nvoice;} {}
  decl {ADvoicelistitem *voicelistitem[NUM_VOICES];} {}
} 
