# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cc}
decl {//Copyright (c) 2002-2005 Nasca Octavian Paul} {private local
} 

decl {//License: GNU GPL version 2 or later} {private local
} 

decl {\#include "../Synth/OscilGen.h"} {public local
} 

decl {\#include "../Misc/Util.h"} {public local
} 

decl {\#include "../Misc/Master.h"} {public local
} 

decl {\#include "ResonanceUI.h"} {public local
} 

decl {\#include "Fl_Oscilloscope.h"} {public local
} 

decl {\#include "Fl_OscilSpectrum.h"} {public local
} 

decl {\#include "Fl_Osc_Interface.h"} {public local
} 

decl {\#include <FL/Fl_Box.H>} {public local
} 

decl {\#include <FL/Fl_Group.H>} {public local
} 

decl {\#include <FL/Fl_Slider.H>} {public local
} 

decl {\#include <math.h>} {private local
} 

decl {\#include <stdio.h>} {private local
} 

decl {\#include <stdlib.h>} {private local
} 

decl {\#include <string.h>} {private local
} 

decl {\#include "WidgetPDial.h"} {public local
} 

decl {\#include "Fl_Osc_Pane.H"} {public local
} 

decl {\#include "EnvelopeUI.h"} {public local
} 

decl {\#include "LFOUI.h"} {public local
} 

decl {\#include "FilterUI.h"} {public local
} 

decl {\#include "PresetsUI.h"} {public local
} 

decl {\#include <FL/fl_draw.H>} {public local
} 

class PSlider {open : {public Fl_Slider}
} {
  Function {PSlider(int x,int y, int w, int h, const char *label=0):Fl_Slider(x,y,w,h,label)} {} {
    code {;} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {int X=x(),Y=y(),W=w(),H=h();

if ((!Fl::event_buttons())|| (event==0)||(Fl::event_shift()==0)) return(Fl_Slider::handle(event));

if (!Fl::event_inside(X,Y,W,H)) {
	if (event==FL_DRAG){
		Fl_Slider::handle(FL_RELEASE);
		Fl_Slider::handle(FL_LEAVE);
		deactivate();
		activate();
		return(1);	
	}else{
		return(Fl_Slider::handle(event));
	};
} else {
	//Fl_Slider::handle(FL_FOCUS);
	Fl_Slider::handle(FL_PUSH);
};

return(1);} {}
  }
  decl {std::string loc;} {public local
  }
  decl {Fl_Osc_Interface *osc} {public local
  }
} 

class Oscilharmonic {open : {public Fl_Group}
} {
  Function {make_window()} {open private
  } {
    Fl_Window harmonic {open
      private xywh {392 673 100 225} type Double box NO_BOX
      class Fl_Osc_Group visible
    } {
      Fl_Slider mag {
        callback {int x=64;
if (Fl::event_button3()) o->value(x);
   else x=127-(int)o->value();
if (x==64) o->selection_color(0);
    else o->selection_color(222);

 o->osc->writeValue(o->loc+"magnitude"+to_s(n), (char)x);
 if (x==64) {
    o->osc->writeValue(o->loc+"phase"+to_s(n), (char)64);
    phase->value(64);
 }
 o->osc->requestValue(o->loc+"prepare");
 o->osc->requestValue(o->loc+"spectrum");
 o->osc->requestValue(o->loc+"waveform");

display->redraw();
oldosc->redraw();
if (cbwidget!=NULL) {
	cbwidget->do_callback();
	applybutton->color(FL_RED);
	applybutton->redraw();
};}
        xywh {0 15 15 115} type {Vert Knob} box NO_BOX selection_color 222 maximum 127 step 1 value 64
        code0 {//o->value(127-oscil->Phmag[n]);}
        code1 {//if (oscil->Phmag[n]==64) o->selection_color(0);}
        class PSlider
      }
      Fl_Slider phase {
        callback {int x=64;
if (Fl::event_button3()) o->value(x);
   else x=(int)o->value();

o->osc->writeValue(o->loc+"phase"+to_s(n), (char) x);
o->osc->requestValue(o->loc+"prepare");
o->osc->requestValue(o->loc+"spectrum");
o->osc->requestValue(o->loc+"waveform");

display->redraw();
oldosc->redraw();
if (cbwidget!=NULL) {
	cbwidget->do_callback();
	applybutton->color(FL_RED);
	applybutton->redraw();
};}
        xywh {0 135 15 75} type {Vert Knob} box NO_BOX selection_color 222 maximum 127 step 1 value 64
        code0 {//o->value(oscil->Phphase[n]);}
        class PSlider
      }
      Fl_Box {} {
        xywh {15 70 5 5} box FLAT_BOX color 45
      }
      Fl_Box {} {
        xywh {15 170 5 5} box FLAT_BOX color 45
      }
      Fl_Box {} {
        label 01
        xywh {0 210 20 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
      Fl_Box {} {
        label 01
        xywh {0 0 20 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
    }
  }
  Function {Oscilharmonic(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {n=0;
display=NULL;
applybutton=NULL;
cbwidget=NULL;} {}
  }
  Function {init(int n_,Fl_Group *display_,Fl_Widget *oldosc_,Fl_Widget *cbwidget_,Fl_Widget *applybutton_, std::string loc_, Fl_Osc_Interface *osc_)} {open
  } {
    code {assert(osc_);
assert(!loc_.empty());

n=n_;
display=display_;
oldosc=oldosc_;
cbwidget=cbwidget_;
applybutton=applybutton_;
osc = osc_;
loc = loc_;
make_window();
mag->osc = osc;
mag->loc = loc;
phase->osc = osc;
phase->loc = loc;

//osc->requestValue(loc+"magnitude"+to_s(n));
//osc->requestValue(loc+"phase"+to_s(n));
end();
harmonic->show();} {}
  }
  Function {refresh()} {open
  } {
    code {osc->requestValue(loc+"magnitude"+to_s(n));//mag->value(127-oscil->Phmag[n]);
osc->requestValue(loc+"phase"+to_s(n));//phase->value(oscil->Phphase[n]);

if (mag->value()==64)
    mag->selection_color(0);
else
    mag->selection_color(222);} {}
  }
  Function {~Oscilharmonic()} {} {
    code {harmonic->hide();
//delete(harmonic);} {}
  }
  decl {Fl_Group *display;} {private local
  }
  decl {int n;} {private local
  }
  decl {Fl_Widget *oldosc,*cbwidget,*applybutton;} {private local
  }
  decl {Fl_Osc_Interface *osc;} {private local
  }
  decl {std::string loc;} {private local
  }
} 

class OscilEditor {open : {public PresetsUI_}
} {
  Function {make_window()} {open
  } {
    Fl_Window osceditUI {
      label {ADsynth Oscillator Editor} open
      xywh {341 339 735 595} type Double
      code0 {if (oscil->ADvsPAD) o->label("PADsynth Harmonic Content Editor");} visible
    } {
      Fl_Group dummy {open selected
        xywh {25 25 15 15} color 32 selection_color 71 labelcolor 179
        code0 {dummy->pane_name = loc;}
        code1 {dummy->osc = osc;}
        class Fl_Osc_Group
      } {}
      Fl_Button applybutton {
        label Apply
        callback {applybutton->color(FL_GRAY);
applybutton->redraw();
if (cbapplywidget!=NULL) {
	cbapplywidget->do_callback();
	cbapplywidget->color(FL_GRAY);
	cbapplywidget->redraw();
};}
        xywh {300 280 60 20} box THIN_UP_BOX labelfont 1
        code0 {if (!oscil->ADvsPAD) o->hide();}
      }
      Fl_Group oscildisplaygroup {open
        xywh {5 5 360 300} box UP_FRAME
      } {
        Fl_Group {} {open
          xywh {10 85 350 190} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
          code0 {oscilo=new Fl_Oscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {oscilo->parent(dummy);oscilo->init(false);}
          code2 {oscilo->activate();}
        } {}
        Fl_Box {} {
          label Oscillator
          xywh {120 10 110 20} labelfont 1
        }
        Fl_Value_Slider rndslider {
          label rnd
          callback {oscil->Prand=(int)o->value()+64;
oscildisplaygroup->redraw();
oldosc->redraw();}
          tooltip {Oscilator Phase Randomness: smaller than 0 is "group", larger than 0 is for each harmonic} xywh {140 285 100 10} type {Horz Knob} box NO_BOX labelsize 10 align 5 minimum -64 maximum 63 step 1
          code0 {if (oscil->ADvsPAD) o->hide();}
        }
        Fl_Group {} {open
          xywh {10 30 350 50} box THIN_DOWN_BOX color 32 selection_color 218 labelcolor 63
          code0 {oscils=new Fl_OscilSpectrum(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {oscils->parent(dummy);oscils->init(false);}
          code2 {oscils->activate();}
        } {}
        Fl_Group {} {
          xywh {246 277 115 25} box UP_FRAME
          code0 {if (oscil->ADvsPAD) o->hide();}
        } {
          Fl_Choice hrndtype {
            label {H.rnd}
            callback {oscil->Pamprandtype=(int) o->value();}
            tooltip {Harmonic Amplitude Randomness} xywh {281 282 50 15} down_box BORDER_BOX labelsize 10 textsize 10
          } {
            MenuItem {} {
              label None
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Pow
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Sin
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Dial hrnddial {
            callback {oscil->Pamprandpower=(int) o->value();}
            tooltip {Oscillator's spectrum adjust parameter} xywh {338 280 18 18} maximum 127 step 1
            class WidgetPDial
          }
        }
      }
      Fl_Group basefuncdisplaygroup {open
        xywh {365 5 360 300} box UP_FRAME
        code0 {o->pane_name = loc;}
        code1 {o->osc = osc;}
        code2 {assert(osc);}
        class Fl_Osc_Group
      } {
        Fl_Group {} {
          xywh {370 85 350 190} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179
          code0 {oscilo_base=new Fl_Oscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
          code1 {oscilo_base->parent(dummy);oscilo_base->init(true);}
          code2 {oscilo_base->activate();}
        } {}
        Fl_Dial bfslider {
          callback {oscil->Pbasefuncpar=(int)o->value()+64;
basefuncdisplaygroup->redraw();
bfparval->value(oscil->Pbasefuncpar-64);

redrawoscil();}
          tooltip {Base Function Parameter} xywh {520 280 20 20} minimum -64 maximum 63 step 1
          class WidgetPDial
        }
        Fl_Choice bftype {
          label {Base.F..}
          callback {oscil->Pcurrentbasefunc=(int) o->value();

basefuncdisplaygroup->redraw();
redrawoscil();

if ((oscil->Pcurrentbasefunc==0)||(oscil->Pcurrentbasefunc==127)) basefuncmodulation->deactivate();
      else basefuncmodulation->activate();}
          xywh {370 285 90 15} down_box BORDER_BOX labelsize 10 align 5 textsize 11
        } {
          MenuItem {} {
            label Sine
            xywh {10 10 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Triangle
            xywh {20 20 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Pulse
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Saw
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Power
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Gauss
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Diode
            xywh {60 60 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label AbsSine
            xywh {70 70 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label PulseSine
            xywh {80 80 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label StrchSine
            xywh {90 90 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Chirp
            xywh {100 100 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label AbsStrSine
            xywh {102 102 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Chebyshev
            xywh {112 112 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Sqr
            xywh {122 122 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Spike
            xywh {122 122 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Circle
            xywh {122 122 100 20} labelfont 1 labelsize 11
          }
        }
        Fl_Box {} {
          label {Base Func.}
          xywh {480 10 110 20} labelfont 1
        }
        Fl_Group {} {open
          xywh {370 30 350 50} box THIN_DOWN_BOX color 32 selection_color 218 labelcolor 63
          code0 {oscils_base=new Fl_OscilSpectrum (o->x(),o->y(),o->w(),o->h(),"");}
          code1 {oscils_base->parent(dummy);oscils_base->init(true);}
          code2 {oscils_base->activate();}
        } {}
        Fl_Value_Output bfparval {
          label {Par.}
          xywh {490 285 25 15} labelsize 12 minimum -63 maximum 63 step 1
        }
        Fl_Group basefuncmodulation {
          xywh {550 276 169 25} box UP_FRAME
          code0 {if ((oscil->Pcurrentbasefunc==0)||(oscil->Pcurrentbasefunc==127)) basefuncmodulation->deactivate();}
        } {
          Fl_Choice bfmodtype {
            label {B.F.Mod.}
            callback {oscil->Pbasefuncmodulation=(int) o->value();
basefuncdisplaygroup->redraw();
redrawoscil();}
            tooltip {Base function modulation} xywh {599 281 50 15} down_box BORDER_BOX labelsize 10 textsize 10
          } {
            MenuItem {} {
              label None
              xywh {50 50 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Rev
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Sine
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Pow
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Dial bfmodpar1 {
            callback {oscil->Pbasefuncmodulationpar1=(int)o->value();
basefuncdisplaygroup->redraw();
redrawoscil();}
            tooltip {Oscillator's modulation parameter 1} xywh {659 281 15 15} maximum 127 step 1
            class WidgetPDial
          }
          Fl_Dial bfmodpar2 {
            callback {oscil->Pbasefuncmodulationpar2=(int)o->value();
basefuncdisplaygroup->redraw();
redrawoscil();}
            tooltip {Oscillator's modulation parameter 2} xywh {679 281 15 15} maximum 127 step 1
            class WidgetPDial
          }
          Fl_Dial bfmodpar3 {
            callback {oscil->Pbasefuncmodulationpar3=(int)o->value();
basefuncdisplaygroup->redraw();
redrawoscil();}
            tooltip {Oscillator's modulation parameter 3} xywh {699 281 15 15} maximum 127 step 1
            class WidgetPDial
          }
        }
      }
      Fl_Choice magtype {
        label {Mag.Type}
        callback {oscil->Phmagtype=(int) o->value();
basefuncdisplaygroup->redraw();

redrawoscil();}
        xywh {70 280 65 20} down_box BORDER_BOX labelsize 11 textsize 11
      } {
        MenuItem {} {
          label Linear
          xywh {0 0 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {-40dB}
          xywh {10 10 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {-60dB}
          xywh {20 20 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {-80dB}
          xywh {30 30 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label {-100dB}
          xywh {40 40 100 20} labelfont 1 labelsize 11
        }
      }
      Fl_Button {} {
        label {Use as base}
        callback {oscil->useasbase();
if (autoclearbutton->value()){
   for (int i=0;i<MAX_AD_HARMONICS;i++){
      h[i]->mag->value(64);
      oscil->Phmag[i]=64;
      h[i]->phase->value(64);
      oscil->Phphase[i]=64;
   };
   oscil->Phmag[0]=127;

   oscil->Pharmonicshift=0;
   harmonicshiftcounter->value(0);

   h[0]->mag->value(0);
   wshbutton->value(0);
   wshbutton->do_callback();
   fltbutton->value(0);
   fltbutton->do_callback();
   sabutton->value(0);
   sabutton->do_callback();
};

//pthread_mutex_lock(&master->mutex);
 for (int i=0;i<MAX_AD_HARMONICS;i++){
   if (oscil->Phmag[i]==64) h[i]->mag->selection_color(0);
      else h[i]->mag->selection_color(222);
 };
 osc->requestValue(loc+"prepare");
//pthread_mutex_unlock(&master->mutex);

basefuncdisplaygroup->redraw();
redrawoscil();}
        tooltip {Use this Oscillator as base function} xywh {5 313 85 20} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Button {} {
        label Close
        callback {osceditUI->hide();}
        xywh {668 565 62 25} box THIN_UP_BOX
      }
      Fl_Button {} {
        label Clear
        callback {if (!fl_choice("Clear the harmonics settings?","No","Yes",NULL)) return;

for (int i=0;i<MAX_AD_HARMONICS;i++){
    h[i]->mag->value(64);
    oscil->Phmag[i]=64;
    h[i]->phase->value(64);
    oscil->Phphase[i]=64;
};
oscil->Phmag[0]=127;
h[0]->mag->value(0);

for (int i=0;i<MAX_AD_HARMONICS;i++){
  if (oscil->Phmag[i]==64) h[i]->mag->selection_color(0);
     else h[i]->mag->selection_color(222);
};

//harmonics->redraw();
osc->requestValue(loc+"prepare");
redrawoscil();}
        xywh {670 505 55 15} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Group {} {
        xywh {135 308 150 30} box UP_FRAME
      } {
        Fl_Choice wshbutton {
          label {Wsh.}
          callback {oscil->Pwaveshapingfunction=(int) o->value();
basefuncdisplaygroup->redraw();
redrawoscil();} open
          tooltip {Waveshaping function} xywh {165 313 55 20} down_box BORDER_BOX labelsize 10 textsize 10
        } {
          MenuItem {} {
            label None
            xywh {25 25 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Atan
            xywh {35 35 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Asym1
            xywh {45 45 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Pow
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Sine
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Qnts
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Zigzg
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Lmt
            xywh {95 95 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LmtU
            xywh {105 105 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LmtL
            xywh {115 115 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label ILmt
            xywh {127 127 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Clip
            xywh {137 137 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Asym2
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Pow2
            xywh {95 95 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Sgm
            xywh {90 90 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial wshpar {
          callback {oscil->Pwaveshaping=(int)o->value()+64;
wsparval->value(oscil->Pwaveshaping-64);
redrawoscil();}
          tooltip {Waveshaping Parameter} xywh {260 313 20 20} minimum -64 maximum 63 step 1
          class WidgetPDial
        }
        Fl_Value_Output wsparval {
          xywh {228 316 25 15} labelsize 12 minimum -63 maximum 63 step 1
        }
      }
      Fl_Light_Button autoclearbutton {
        label {Clr.}
        tooltip {Auto clear when using the oscillator as base function} xywh {95 313 35 20} box THIN_UP_BOX value 1 labelfont 1 labelsize 10
      }
      Fl_Group {} {
        xywh {285 308 155 30} box UP_FRAME
      } {
        Fl_Choice fltbutton {
          label Filter
          callback {oscil->Pfiltertype=(int) o->value();

redrawoscil();}
          tooltip {Oscillator's filter type} xywh {315 313 50 20} down_box BORDER_BOX labelsize 10 textsize 10
        } {
          MenuItem {} {
            label None
            xywh {35 35 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LP1
            xywh {45 45 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HP1a
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HP1b
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label BP1
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label BS1
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LP2
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label HP2
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label BP2
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label BS2
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Cos
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Sin
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label LSh
            xywh {95 95 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label S
            xywh {105 105 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial filtervalue1 {
          callback {oscil->Pfilterpar1=(int)o->value();

redrawoscil();}
          tooltip {Oscillator's filter parameter1} xywh {367 313 20 20} maximum 127 step 1
          class WidgetPDial
        }
        Fl_Check_Button filterpref {
          label p
          callback {oscil->Pfilterbeforews=(int)o->value();

redrawoscil();}
          tooltip {Apply the filter before the waveshaping} xywh {415 313 20 20} down_box DOWN_BOX labelsize 10 align 24
        }
        Fl_Dial filtervalue2 {
          callback {oscil->Pfilterpar2=(int)o->value();

redrawoscil();}
          tooltip {Oscillator's filter parameter2} xywh {392 313 20 20} maximum 127 step 1
          class WidgetPDial
        }
      }
      Fl_Group {} {
        xywh {590 308 135 30} box UP_FRAME
      } {
        Fl_Choice sabutton {
          label {Sp.adj.}
          callback {oscil->Psatype=(int) o->value();
redrawoscil();}
          tooltip {Oscillator's spectrum adjust} xywh {630 313 60 20} down_box BORDER_BOX labelsize 10 textsize 10
        } {
          MenuItem {} {
            label None
            xywh {55 55 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Pow
            xywh {65 65 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label ThrsD
            xywh {75 75 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label ThrsU
            xywh {85 85 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial sadjpar {
          callback {oscil->Psapar=(int)o->value();
redrawoscil();}
          tooltip {Oscillator's spectrum adjust parameter} xywh {695 313 20 20} maximum 127 step 1
          class WidgetPDial
        }
      }
      Fl_Group {} {
        xywh {665 340 65 65} box UP_FRAME
      } {
        Fl_Counter harmonicshiftcounter {
          label {Harmonic Shift}
          callback {oscil->Pharmonicshift=(int)o->value();
redrawoscil();}
          xywh {670 365 55 15} type Simple labelsize 10 align 129 minimum -64 maximum 64 step 1 textfont 1 textsize 10
        }
        Fl_Check_Button harmonicshiftpre {
          label preH
          callback {oscil->Pharmonicshiftfirst=(int)o->value();
redrawoscil();}
          tooltip {Apply the harmonic shift before the waveshaping and filtering} xywh {690 385 34 15} down_box DOWN_BOX labelsize 10 align 24
        }
        Fl_Button {} {
          label R
          callback {oscil->Pharmonicshift=0;
harmonicshiftcounter->value(0);
redrawoscil();}
          xywh {670 385 20 15} box THIN_UP_BOX labelfont 1 labelsize 10
        }
      }
      Fl_Group {} {open
        xywh {665 410 65 90} box UP_FRAME
      } {
        Fl_Choice adhrtype {
          label {Adpt.Harm.}
          callback {oscil->Padaptiveharmonics=(int) o->value();
redrawoscil();}
          tooltip {The type of the addaptive harmonics} xywh {670 425 55 15} down_box BORDER_BOX labelsize 10 align 129 when 6 textsize 10
        } {
          MenuItem {} {
            label OFF
            xywh {80 80 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label ON
            xywh {90 90 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Square
            xywh {100 100 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 2xSub
            xywh {110 110 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 2xAdd
            xywh {120 120 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 3xSub
            xywh {120 120 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 3xAdd
            xywh {130 130 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 4xSub
            xywh {130 130 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label 4xAdd
            xywh {140 140 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial adhrpow {
          label pow
          callback {oscil->Padaptiveharmonicspower=(int)o->value();
redrawoscil();}
          tooltip {Adaptive harmonics power} xywh {700 460 25 25} labelsize 10 maximum 200 step 1
          class WidgetPDial
        }
        Fl_Dial adhrbf {
          label baseF
          callback {oscil->Padaptiveharmonicsbasefreq=(int)o->value();
redrawoscil();}
          tooltip {Adaptive harmonics base frequency} xywh {670 460 25 25} labelsize 10 maximum 255 step 1
          class WidgetPDial
        }
        Fl_Slider adhrpar {
          callback {oscil->Padaptiveharmonicspar=(int)o->value();
redrawoscil();}
          xywh {670 445 55 10} type {Horz Knob} box NO_BOX maximum 100 step 1 value 50
        }
      }
      Fl_Group {} {
        xywh {440 308 150 30} box UP_FRAME
      } {
        Fl_Choice modtype {
          label {Mod.}
          callback {oscil->Pmodulation=(int) o->value();

redrawoscil();}
          tooltip modulation xywh {470 315 50 15} down_box BORDER_BOX labelsize 10 textsize 10
        } {
          MenuItem {} {
            label None
            xywh {60 60 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Rev
            xywh {70 70 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Sine
            xywh {80 80 100 20} labelfont 1 labelsize 10
          }
          MenuItem {} {
            label Pow
            xywh {90 90 100 20} labelfont 1 labelsize 10
          }
        }
        Fl_Dial modpar1 {
          callback {oscil->Pmodulationpar1=(int)o->value();

redrawoscil();}
          tooltip {Oscillator's modulation parameter 1} xywh {530 315 15 15} maximum 127 step 1
          class WidgetPDial
        }
        Fl_Dial modpar2 {
          callback {oscil->Pmodulationpar2=(int)o->value();

redrawoscil();}
          tooltip {Oscillator's modulation parameter 2} xywh {550 315 15 15} maximum 127 step 1
          class WidgetPDial
        }
        Fl_Dial modpar3 {
          callback {oscil->Pmodulationpar3=(int)o->value();
redrawoscil();}
          tooltip {Oscillator's modulation parameter 3} xywh {570 315 15 15} maximum 127 step 1
          class WidgetPDial
        }
      }
      Fl_Button {} {
        label Sine
        callback {if (!fl_choice("Convert to SINE?","No","Yes",NULL)) return;

osc->requestValue(loc+"convert2sine");

redrawoscil();
refresh();}
        xywh {670 525 55 15} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Button {} {
        label C
        callback {presetsui->copy(oscil);}
        xywh {670 545 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {presetsui->paste(oscil,this);}
        xywh {700 545 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Scroll _this_has_to_be_the_last {open
        xywh {5 340 660 250} type HORIZONTAL box FLAT_BOX
      } {
        Fl_Pack harmonics {open
          xywh {10 345 650 225} type HORIZONTAL
          code0 {for (int i=0;i<MAX_AD_HARMONICS;i++){h[i]=new Oscilharmonic(0,0,20,o->h(),"");h[i]->init(i,oscildisplaygroup,oldosc,cbwidget,applybutton,loc,osc);}}
        } {}
      }
    }
  }
  Function {OscilEditor(OscilGen *oscil_,Fl_Widget *oldosc_,Fl_Widget *cbwidget_,Fl_Widget *cbapplywidget_, std::string loc_, Fl_Osc_Interface *osc_)} {open
  } {
    code {assert(osc_);
assert(!loc_.empty());

oscil=oscil_;
oldosc=oldosc_;
cbwidget=cbwidget_;
cbapplywidget=cbapplywidget_;
osc = osc_;
loc = loc_;

oscilo = NULL;
oscilo_base = NULL;
oscils = NULL;
oscils_base = NULL;

make_window();

refresh();
osceditUI->show();} {}
  }
  Function {~OscilEditor()} {open
  } {
    code {osceditUI->hide();
//for (int i=0;i<MAX_AD_HARMONICS;i++) delete (h[i]);

delete oscilo;
delete oscilo_base;
delete oscils;
delete oscils_base;
delete (osceditUI);} {}
  }
  Function {refresh()} {open
  } {
    code {magtype->value(oscil->Phmagtype);
rndslider->value(oscil->Prand-64);

hrndtype->value(oscil->Pamprandtype);
hrnddial->value(oscil->Pamprandpower);

bftype->value(oscil->Pcurrentbasefunc);
bfparval->value(oscil->Pbasefuncpar-64);
bfslider->value(oscil->Pbasefuncpar-64);

bfmodtype->value(oscil->Pbasefuncmodulation);
bfmodpar1->value(oscil->Pbasefuncmodulationpar1);
bfmodpar2->value(oscil->Pbasefuncmodulationpar2);
bfmodpar3->value(oscil->Pbasefuncmodulationpar3);

wshbutton->value(oscil->Pwaveshapingfunction);
wsparval->value(oscil->Pwaveshaping-64);
wshpar->value(oscil->Pwaveshaping-64);

fltbutton->value(oscil->Pfiltertype);
filtervalue1->value(oscil->Pfilterpar1);
filtervalue2->value(oscil->Pfilterpar2);
filterpref->value(oscil->Pfilterbeforews);

modtype->value(oscil->Pmodulation);
modpar1->value(oscil->Pmodulationpar1);
modpar2->value(oscil->Pmodulationpar2);
modpar3->value(oscil->Pmodulationpar3);

sabutton->value(oscil->Psatype);
sadjpar->value(oscil->Psapar);

harmonicshiftcounter->value(oscil->Pharmonicshift);
harmonicshiftpre->value(oscil->Pharmonicshiftfirst);

adhrtype->value(oscil->Padaptiveharmonics);
adhrbf->value(oscil->Padaptiveharmonicsbasefreq);
adhrpow->value(oscil->Padaptiveharmonicspower);
adhrtype->value(oscil->Padaptiveharmonicspar);

for (int i=0;i<MAX_AD_HARMONICS;i++) h[i]->refresh();

osc->requestValue(loc+"prepare");

basefuncdisplaygroup->redraw();
redrawoscil();} {}
  }
  Function {redrawoscil()} {open
  } {
    code {//get data from backend
oscilo->update();
oscils->update();
oscilo_base->update();
oscils_base->update();

oscildisplaygroup->redraw();
oldosc->redraw();
if (cbwidget!=NULL) {
      cbwidget->do_callback();
      applybutton->color(FL_RED);
      applybutton->redraw();
};} {}
  }
  decl {OscilGen *oscil;} {private local
  }
  decl {Fl_Widget *oldosc,*cbwidget,*cbapplywidget;} {private local
  }
  decl {Oscilharmonic *h[MAX_AD_HARMONICS];} {private local
  }
  decl {std::string loc;} {private local
  }
  decl {Fl_Osc_Interface *osc;} {private local
  }
  decl {Fl_Oscilloscope *oscilo, *oscilo_base;} {private local
  }
  decl {Fl_OscilSpectrum *oscils, *oscils_base;} {private local
  }
} 
